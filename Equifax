{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "earlier-executive",
   "metadata": {},
   "source": [
    "## Independent replication using python Open Source framework for Segmwent 6 (DX Only) :"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "convenient-division",
   "metadata": {},
   "source": [
    "Process to be followed :\n",
    "    \n",
    "1. Save the final training, testing, oot and validation datasets from EfX Scala codes into a BQ table (For Ex Val5, OOT5 , etc)\n",
    "2. After that read the final datasets using below code block\n",
    "3. If you have the weights in the training/testing datasets : fine ; else you need to bring the weights from the original data set. Please refer to the specific section here\n",
    "4. I have also shared the BQ qeuery which is applicable for this segment to save the weight tables in BQ environment.\n",
    "5. Once you have weights ready: merge the datasets\n",
    "6. Define trainign and testing datasets separately \n",
    "7. run the model\n",
    "8. move on to ks-gini , feature imp, SHAP and k-fold etc\n",
    "\n",
    "Installation of packages : \n",
    "If you don't already have the packages installed : please do a pip install beforehand. Fro Exa pip install xgboost pip install SHAP "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "overhead-tractor",
   "metadata": {},
   "source": [
    "## Section 1: Read the final data sets : "
   ]
  },
  {
   "cell_type": "raw",
   "id": "wicked-university",
   "metadata": {},
   "source": [
    " Please select the final list of variables for your model in variable the query_string as defined below "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "quantitative-assistant",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "select unique_key,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,good,bad from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.train_data_seg6_dx;\n",
      "select unique_key,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,good,bad from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.val_data_seg6_dx;\n",
      "select unique_key,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,good,bad from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.test_data_seg6_dx;\n",
      "select unique_key,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,good,bad from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.oot_data_seg6_dx;\n"
     ]
    }
   ],
   "source": [
    "    ## Read the final dev, val and oot datasets from the BQ Bucket. These are the final datasets as prepared and processed within the AME environment with all the required\n",
    "    # feature enginerring, transformation , flooring, capping, missing value imputation and so on. \n",
    "    \n",
    "    \n",
    "    from google.cloud import bigquery as bq\n",
    "\n",
    "    def convertToDF(tableName,project_name = 'dfa-dna-ws5155-us-prd-d151',database_name = 'dfa_dna_ws5155_us_prd_sandbox'):\n",
    "        bqTbl = bq.TableReference.from_string(f\"{project_name}.{database_name}.{tableName}\")\n",
    "\n",
    "\n",
    "        query_string=\"select unique_key,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,good,bad from \"+\"\"f\"{project_name}.{database_name}.{tableName}\"+\";\"\n",
    "\n",
    "        print(query_string)\n",
    "        client=bq.Client()\n",
    "        data=client.query(query_string)\n",
    "        data=data.result().to_dataframe()\n",
    "        return data\n",
    "\n",
    "    ads_seg6_dx_dev_data_final=convertToDF('train_data_seg6_dx')\n",
    "    ads_seg6_dx_val_data_final=convertToDF('val_data_seg6_dx')\n",
    "    ads_seg6_dx_test_data_final=convertToDF('test_data_seg6_dx')\n",
    "    ads_seg6_dx_oot_data_final=convertToDF('oot_data_seg6_dx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "korean-afternoon",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1854688, 34)\n",
      "(1112939, 34)\n",
      "(741265, 34)\n",
      "(4429865, 34)\n"
     ]
    }
   ],
   "source": [
    "print (ads_seg6_dx_dev_data_final.shape)\n",
    "print (ads_seg6_dx_val_data_final.shape)\n",
    "print (ads_seg6_dx_test_data_final.shape)\n",
    "print (ads_seg6_dx_oot_data_final.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ultimate-healthcare",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_key</th>\n",
       "      <th>dayssincelastinquiry</th>\n",
       "      <th>vendorinquiries1years</th>\n",
       "      <th>uniquememberinquiries2years</th>\n",
       "      <th>maximumtradelineprincipalpaidoff</th>\n",
       "      <th>applicationinquiries3years</th>\n",
       "      <th>dayssincelastreturn</th>\n",
       "      <th>dayssincelasttradeline</th>\n",
       "      <th>vendorinquiries180days</th>\n",
       "      <th>dailyinquiries120days</th>\n",
       "      <th>...</th>\n",
       "      <th>nsfreturns120days</th>\n",
       "      <th>applicationinquiries60days</th>\n",
       "      <th>chargeoffs7years</th>\n",
       "      <th>totalpaidoffs</th>\n",
       "      <th>firstpaymentreturns7years</th>\n",
       "      <th>dayssincelastach</th>\n",
       "      <th>currenttradelines</th>\n",
       "      <th>secondlastpaymentdisposition_RETURNED</th>\n",
       "      <th>good</th>\n",
       "      <th>bad</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-04-01-640142155-01CCEB13E11A930B25-301C21...</td>\n",
       "      <td>1733.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1633.0</td>\n",
       "      <td>1683.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1638.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-04-01-495905731-02A4914D4FFCCA1003-1D70C6...</td>\n",
       "      <td>1733.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1514.0</td>\n",
       "      <td>1673.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1516.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-11-01-240908735-01A49164099D73AA00-25E066...</td>\n",
       "      <td>1733.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1645.0</td>\n",
       "      <td>1757.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1649.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-06-01-570841241-02A49294C267F84002-30115F...</td>\n",
       "      <td>1733.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1819.0</td>\n",
       "      <td>1944.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1822.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-08-01-582992391-01BBC559A981AB3F00-199C2C...</td>\n",
       "      <td>1351.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1067.0</td>\n",
       "      <td>537.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1067.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          unique_key dayssincelastinquiry  \\\n",
       "0  2017-04-01-640142155-01CCEB13E11A930B25-301C21...               1733.0   \n",
       "1  2017-04-01-495905731-02A4914D4FFCCA1003-1D70C6...               1733.0   \n",
       "2  2017-11-01-240908735-01A49164099D73AA00-25E066...               1733.0   \n",
       "3  2017-06-01-570841241-02A49294C267F84002-30115F...               1733.0   \n",
       "4  2017-08-01-582992391-01BBC559A981AB3F00-199C2C...               1351.0   \n",
       "\n",
       "  vendorinquiries1years uniquememberinquiries2years  \\\n",
       "0                  -0.0                        -0.0   \n",
       "1                  -0.0                        -0.0   \n",
       "2                  -0.0                        -0.0   \n",
       "3                  -0.0                        -0.0   \n",
       "4                  -0.0                        -0.0   \n",
       "\n",
       "  maximumtradelineprincipalpaidoff applicationinquiries3years  \\\n",
       "0                              0.0                       -0.0   \n",
       "1                              0.0                       -0.0   \n",
       "2                              0.0                       -0.0   \n",
       "3                              0.0                       -0.0   \n",
       "4                              0.0                       -0.0   \n",
       "\n",
       "  dayssincelastreturn dayssincelasttradeline vendorinquiries180days  \\\n",
       "0              1633.0                 1683.0                   -0.0   \n",
       "1              1514.0                 1673.0                   -0.0   \n",
       "2              1645.0                 1757.0                   -0.0   \n",
       "3              1819.0                 1944.0                   -0.0   \n",
       "4              1067.0                  537.0                   -0.0   \n",
       "\n",
       "  dailyinquiries120days  ... nsfreturns120days applicationinquiries60days  \\\n",
       "0                  -0.0  ...              -0.0                       -0.0   \n",
       "1                  -0.0  ...              -0.0                       -0.0   \n",
       "2                  -0.0  ...              -0.0                       -0.0   \n",
       "3                  -0.0  ...              -0.0                       -0.0   \n",
       "4                  -0.0  ...              -0.0                       -0.0   \n",
       "\n",
       "  chargeoffs7years totalpaidoffs firstpaymentreturns7years dayssincelastach  \\\n",
       "0             -0.0           0.0                      -1.0           1638.0   \n",
       "1             -1.0           0.0                      -0.0           1516.0   \n",
       "2             -2.0           0.0                      -0.0           1649.0   \n",
       "3             -1.0           0.0                      -1.0           1822.0   \n",
       "4             -1.0           0.0                      -0.0           1067.0   \n",
       "\n",
       "  currenttradelines secondlastpaymentdisposition_RETURNED good bad  \n",
       "0              -0.0                                  -1.0    0   1  \n",
       "1              -0.0                                  -1.0    0   1  \n",
       "2              -0.0                                  -1.0    1   0  \n",
       "3              -0.0                                  -1.0    0   1  \n",
       "4              -0.0                                  -0.0    0   1  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ads_seg6_dx_dev_data_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "loose-divorce",
   "metadata": {},
   "source": [
    "## We need to write the below queries in the GCP BQ to save those required data tables with only unique id and the weights across the data sets:\n",
    "    \n",
    "create table `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.dev_dx_weights` as \n",
    "select unique_key,weights_model_dx from `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_2` \n",
    "WHERE flag_dx_combo=1 AND flag_train=1 AND PERF_ALL_IND_P12M_Bad_Flag in (0,1) AND dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 \n",
    "                                                                                                                  OR dx_ApplicationInquiries7Years >=1);\n",
    "\n",
    "create table `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.val_dx_weights` as \n",
    "select unique_key,weights_model_dx from `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_2` \n",
    "WHERE flag_dx_combo=1 AND flag_val=1 AND PERF_ALL_IND_P12M_Bad_Flag in (0,1) AND dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 \n",
    "                                                                                                                OR dx_ApplicationInquiries7Years >=1);\n",
    "\n",
    "\n",
    "create table `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.test_dx_weights` as \n",
    "select unique_key,weights_model_dx from `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_2` \n",
    "WHERE flag_dx_combo=1 AND flag_test=1 AND PERF_ALL_IND_P12M_Bad_Flag in (0,1) AND dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 \n",
    "                                                                                                                 OR dx_ApplicationInquiries7Years >=1);\n",
    "\n",
    "create table `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.oot_dx_weights` as \n",
    "select unique_key,weights_model_dx from `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_oot` \n",
    "WHERE flag_dx_combo=1 AND PERF_ALL_IND_P12M_Bad_Flag in (0,1) AND dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 \n",
    "                                                                                                 OR dx_ApplicationInquiries7Years >=1)\n",
    "\n",
    "\n",
    "select count(distinct(unique_key)) from `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.dev_dx_weights`\n",
    "\n",
    "select count(distinct(unique_key)) from `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.val_dx_weights`\n",
    "\n",
    "select count(distinct(unique_key)) from `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.test_dx_weights`\n",
    "\n",
    "select count(distinct(unique_key)) from `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.oot_dx_weights`    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "hearing-accent",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.dev_dx_weights;\n",
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.val_dx_weights;\n",
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.test_dx_weights;\n",
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.oot_dx_weights;\n"
     ]
    }
   ],
   "source": [
    "    ## Let us now read the individual data wise weights : \n",
    "    \n",
    "    \n",
    "    from google.cloud import bigquery as bq\n",
    "\n",
    "    def convertToDF(tableName,project_name = 'dfa-dna-ws5155-us-prd-d151',database_name = 'dfa_dna_ws5155_us_prd_sandbox'):\n",
    "        bqTbl = bq.TableReference.from_string(f\"{project_name}.{database_name}.{tableName}\")\n",
    "\n",
    "\n",
    "        query_string=\"select * from \"+\"\"f\"{project_name}.{database_name}.{tableName}\"+\";\"\n",
    "\n",
    "        print(query_string)\n",
    "        client=bq.Client()\n",
    "        data=client.query(query_string)\n",
    "        data=data.result().to_dataframe()\n",
    "        return data\n",
    "\n",
    "    train_dx_weights=convertToDF('dev_dx_weights')\n",
    "    val_dx_weights=convertToDF('val_dx_weights')\n",
    "    test_dx_weights=convertToDF('test_dx_weights')\n",
    "    oot_dx_weights=convertToDF('oot_dx_weights')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "defined-investing",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_key</th>\n",
       "      <th>weights_model_dx</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-08-01-536982605-01CB3A57A77BA3FCA5-359A46...</td>\n",
       "      <td>1.479948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-11-01-406861641-01A4900713771F5902-156A6F...</td>\n",
       "      <td>1.479948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-02-01-425555707-02A48E6614620AE503-1C8967...</td>\n",
       "      <td>1.479948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-03-01-220909349-NULL-NULL-NULL-NULL_value...</td>\n",
       "      <td>1.479948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-08-01-471278913-01C97CF22AD8EE0126-1FD067...</td>\n",
       "      <td>1.479948</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          unique_key  weights_model_dx\n",
       "0  2017-08-01-536982605-01CB3A57A77BA3FCA5-359A46...          1.479948\n",
       "1  2017-11-01-406861641-01A4900713771F5902-156A6F...          1.479948\n",
       "2  2018-02-01-425555707-02A48E6614620AE503-1C8967...          1.479948\n",
       "3  2017-03-01-220909349-NULL-NULL-NULL-NULL_value...          1.479948\n",
       "4  2017-08-01-471278913-01C97CF22AD8EE0126-1FD067...          1.479948"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_dx_weights.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dutch-moscow",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1854688, 2)\n",
      "(1112939, 2)\n",
      "(741265, 2)\n",
      "(4429865, 2)\n"
     ]
    }
   ],
   "source": [
    "print (train_dx_weights.shape)\n",
    "print (val_dx_weights.shape)\n",
    "print (test_dx_weights.shape)\n",
    "print (oot_dx_weights.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "noticed-coordinator",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.904761    697675\n",
       "0.986281    317162\n",
       "0.810582    265255\n",
       "1.255120    218567\n",
       "0.930837    136162\n",
       "1.344205    110239\n",
       "1.223770     68168\n",
       "1.479948     41460\n",
       "Name: weights_model_dx, dtype: int64"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_dx_weights['weights_model_dx'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "elementary-guess",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.904761    278877\n",
       "0.986281    126708\n",
       "0.810582    106111\n",
       "1.255120     87356\n",
       "0.930837     54352\n",
       "1.344205     44127\n",
       "1.223770     27236\n",
       "1.479948     16498\n",
       "Name: weights_model_dx, dtype: int64"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_dx_weights['weights_model_dx'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "editorial-retreat",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "unique_key                                object\n",
      "dayssincelastinquiry                     float64\n",
      "vendorinquiries1years                    float64\n",
      "uniquememberinquiries2years              float64\n",
      "maximumtradelineprincipalpaidoff         float64\n",
      "applicationinquiries3years               float64\n",
      "dayssincelastreturn                      float64\n",
      "dayssincelasttradeline                   float64\n",
      "vendorinquiries180days                   float64\n",
      "dailyinquiries120days                    float64\n",
      "uniquememberinquiries7years              float64\n",
      "lastpaymentdisposition_COMPLETE          float64\n",
      "paymentscompleted7years                  float64\n",
      "maximumtradelineprincipal                float64\n",
      "achreturns1years                         float64\n",
      "maximumtotalprincipal                    float64\n",
      "paymentsreturned7years                   float64\n",
      "nsfreturns5years                         float64\n",
      "achreturns3years                         float64\n",
      "thirdlastpaymentdisposition_COMPLETE     float64\n",
      "lastpaymentdisposition_RETURNED          float64\n",
      "secondlastpaymentdisposition_COMPLETE    float64\n",
      "paymentsreturned3years                   float64\n",
      "paymentsreturned1years                   float64\n",
      "nsfreturns120days                        float64\n",
      "applicationinquiries60days               float64\n",
      "chargeoffs7years                         float64\n",
      "totalpaidoffs                            float64\n",
      "firstpaymentreturns7years                float64\n",
      "dayssincelastach                         float64\n",
      "currenttradelines                        float64\n",
      "secondlastpaymentdisposition_RETURNED    float64\n",
      "good                                       int64\n",
      "bad                                        int64\n",
      "dtype: object\n",
      "unique_key           object\n",
      "weights_model_dx    float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# convert all columns of DataFrame to numeric forms for model development: \n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "ads_seg6_dx_dev_data=ads_seg6_dx_dev_data_final.copy()\n",
    "ads_seg6_dx_dev_data.iloc[:, 1:]=ads_seg6_dx_dev_data.iloc[:, 1:].apply(pd.to_numeric)\n",
    "\n",
    "ads_seg6_dx_val_data=ads_seg6_dx_val_data_final.copy()\n",
    "ads_seg6_dx_val_data.iloc[:, 1:]=ads_seg6_dx_val_data.iloc[:, 1:].apply(pd.to_numeric)\n",
    "\n",
    "ads_seg6_dx_test_data=ads_seg6_dx_test_data_final.copy()\n",
    "ads_seg6_dx_test_data.iloc[:, 1:]=ads_seg6_dx_test_data.iloc[:, 1:].apply(pd.to_numeric)\n",
    "\n",
    "ads_seg6_dx_oot_data=ads_seg6_dx_oot_data_final.copy()\n",
    "ads_seg6_dx_oot_data.iloc[:, 1:]=ads_seg6_dx_oot_data.iloc[:, 1:].apply(pd.to_numeric)\n",
    "\n",
    "print(ads_seg6_dx_dev_data.dtypes)\n",
    "# print(ads_seg6_dx_val_data.dtypes)\n",
    "# print(ads_seg6_dx_test_data.dtypes)\n",
    "# print(ads_seg6_dx_oot_data.dtypes)\n",
    "\n",
    "\n",
    "##Change data type for the weights as well: \n",
    "\n",
    "train_dx_weights_final=train_dx_weights.copy()\n",
    "train_dx_weights_final.iloc[:, 1]=train_dx_weights_final.iloc[:, 1].apply(pd.to_numeric)\n",
    "\n",
    "val_dx_weights_final=val_dx_weights.copy()\n",
    "val_dx_weights_final.iloc[:, 1]=val_dx_weights_final.iloc[:, 1].apply(pd.to_numeric)\n",
    "\n",
    "test_dx_weights_final=test_dx_weights.copy()\n",
    "test_dx_weights_final.iloc[:, 1]=test_dx_weights_final.iloc[:, 1].apply(pd.to_numeric)\n",
    "\n",
    "oot_dx_weights_final=oot_dx_weights.copy()\n",
    "oot_dx_weights_final.iloc[:, 1]=oot_dx_weights_final.iloc[:, 1].apply(pd.to_numeric)\n",
    "\n",
    "print(train_dx_weights_final.dtypes)\n",
    "# print(val_dx_weights_final.dtypes)\n",
    "# print(test_dx_weights_final.dtypes)\n",
    "# print(oot_dx_weights_final.dtypes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "detected-impression",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Merge the weights with the original data based on unique keys :\n",
    "ads_seg6_dx_dev_data_2=ads_seg6_dx_dev_data.merge(train_dx_weights_final,on='unique_key',how='left')\n",
    "ads_seg6_dx_val_data_2=ads_seg6_dx_val_data.merge(val_dx_weights_final,on='unique_key',how='left')\n",
    "ads_seg6_dx_test_data_2=ads_seg6_dx_test_data.merge(test_dx_weights_final,on='unique_key',how='left')\n",
    "ads_seg6_dx_oot_data_2=ads_seg6_dx_oot_data.merge(oot_dx_weights_final,on='unique_key',how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "registered-norman",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_key</th>\n",
       "      <th>dayssincelastinquiry</th>\n",
       "      <th>vendorinquiries1years</th>\n",
       "      <th>uniquememberinquiries2years</th>\n",
       "      <th>maximumtradelineprincipalpaidoff</th>\n",
       "      <th>applicationinquiries3years</th>\n",
       "      <th>dayssincelastreturn</th>\n",
       "      <th>dayssincelasttradeline</th>\n",
       "      <th>vendorinquiries180days</th>\n",
       "      <th>dailyinquiries120days</th>\n",
       "      <th>...</th>\n",
       "      <th>applicationinquiries60days</th>\n",
       "      <th>chargeoffs7years</th>\n",
       "      <th>totalpaidoffs</th>\n",
       "      <th>firstpaymentreturns7years</th>\n",
       "      <th>dayssincelastach</th>\n",
       "      <th>currenttradelines</th>\n",
       "      <th>secondlastpaymentdisposition_RETURNED</th>\n",
       "      <th>good</th>\n",
       "      <th>bad</th>\n",
       "      <th>weights_model_dx</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-04-01-640142155-01CCEB13E11A930B25-301C21...</td>\n",
       "      <td>1733.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1633.0</td>\n",
       "      <td>1683.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1638.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.344205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-04-01-495905731-02A4914D4FFCCA1003-1D70C6...</td>\n",
       "      <td>1733.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1514.0</td>\n",
       "      <td>1673.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1516.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.904761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-11-01-240908735-01A49164099D73AA00-25E066...</td>\n",
       "      <td>1733.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1645.0</td>\n",
       "      <td>1757.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1649.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.986281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-06-01-570841241-02A49294C267F84002-30115F...</td>\n",
       "      <td>1733.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1819.0</td>\n",
       "      <td>1944.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1822.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.904761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-08-01-582992391-01BBC559A981AB3F00-199C2C...</td>\n",
       "      <td>1351.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1067.0</td>\n",
       "      <td>537.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>1067.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.479948</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          unique_key  dayssincelastinquiry  \\\n",
       "0  2017-04-01-640142155-01CCEB13E11A930B25-301C21...                1733.0   \n",
       "1  2017-04-01-495905731-02A4914D4FFCCA1003-1D70C6...                1733.0   \n",
       "2  2017-11-01-240908735-01A49164099D73AA00-25E066...                1733.0   \n",
       "3  2017-06-01-570841241-02A49294C267F84002-30115F...                1733.0   \n",
       "4  2017-08-01-582992391-01BBC559A981AB3F00-199C2C...                1351.0   \n",
       "\n",
       "   vendorinquiries1years  uniquememberinquiries2years  \\\n",
       "0                   -0.0                         -0.0   \n",
       "1                   -0.0                         -0.0   \n",
       "2                   -0.0                         -0.0   \n",
       "3                   -0.0                         -0.0   \n",
       "4                   -0.0                         -0.0   \n",
       "\n",
       "   maximumtradelineprincipalpaidoff  applicationinquiries3years  \\\n",
       "0                               0.0                        -0.0   \n",
       "1                               0.0                        -0.0   \n",
       "2                               0.0                        -0.0   \n",
       "3                               0.0                        -0.0   \n",
       "4                               0.0                        -0.0   \n",
       "\n",
       "   dayssincelastreturn  dayssincelasttradeline  vendorinquiries180days  \\\n",
       "0               1633.0                  1683.0                    -0.0   \n",
       "1               1514.0                  1673.0                    -0.0   \n",
       "2               1645.0                  1757.0                    -0.0   \n",
       "3               1819.0                  1944.0                    -0.0   \n",
       "4               1067.0                   537.0                    -0.0   \n",
       "\n",
       "   dailyinquiries120days  ...  applicationinquiries60days  chargeoffs7years  \\\n",
       "0                   -0.0  ...                        -0.0              -0.0   \n",
       "1                   -0.0  ...                        -0.0              -1.0   \n",
       "2                   -0.0  ...                        -0.0              -2.0   \n",
       "3                   -0.0  ...                        -0.0              -1.0   \n",
       "4                   -0.0  ...                        -0.0              -1.0   \n",
       "\n",
       "   totalpaidoffs  firstpaymentreturns7years  dayssincelastach  \\\n",
       "0            0.0                       -1.0            1638.0   \n",
       "1            0.0                       -0.0            1516.0   \n",
       "2            0.0                       -0.0            1649.0   \n",
       "3            0.0                       -1.0            1822.0   \n",
       "4            0.0                       -0.0            1067.0   \n",
       "\n",
       "   currenttradelines  secondlastpaymentdisposition_RETURNED  good  bad  \\\n",
       "0               -0.0                                   -1.0     0    1   \n",
       "1               -0.0                                   -1.0     0    1   \n",
       "2               -0.0                                   -1.0     1    0   \n",
       "3               -0.0                                   -1.0     0    1   \n",
       "4               -0.0                                   -0.0     0    1   \n",
       "\n",
       "   weights_model_dx  \n",
       "0          1.344205  \n",
       "1          0.904761  \n",
       "2          0.986281  \n",
       "3          0.904761  \n",
       "4          1.479948  \n",
       "\n",
       "[5 rows x 35 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ads_seg6_dx_dev_data_2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "executive-rings",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Extracting all the weights acorss the 4 data sets: \n",
    "\n",
    "train_weights=ads_seg6_dx_dev_data_2.iloc[:,34]\n",
    "val_weights=ads_seg6_dx_val_data_2.iloc[:,34]\n",
    "test_weights=ads_seg6_dx_test_data_2.iloc[:,34]\n",
    "oot_weights=ads_seg6_dx_oot_data_2.iloc[:,34]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "black-locking",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Define the final X and y columns for model training and testing purpose: \n",
    "\n",
    "X_train = ads_seg6_dx_dev_data_2.drop(['unique_key','good','bad','weights_model_dx'], axis=1)\n",
    "X_val = ads_seg6_dx_val_data_2.drop(['unique_key','good','bad','weights_model_dx'], axis=1)\n",
    "X_test = ads_seg6_dx_test_data_2.drop(['unique_key','good','bad','weights_model_dx'], axis=1)\n",
    "X_oot = ads_seg6_dx_oot_data_2.drop(['unique_key','good','bad','weights_model_dx'], axis=1)\n",
    "\n",
    "y_train = ads_seg6_dx_dev_data_2['good']\n",
    "y_val = ads_seg6_dx_val_data_2['good']\n",
    "y_test = ads_seg6_dx_test_data_2['good']\n",
    "y_oot = ads_seg6_dx_oot_data_2['good']\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "annual-climb",
   "metadata": {},
   "source": [
    "## Section 2 : Building XGBoost model : "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "greek-canon",
   "metadata": {},
   "source": [
    "Please note: Since we do not have a fixed seed value, we need to stop the XGBoost model here based on the logloss value which has a close match w.r.t the AME outcome. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "criminal-universe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[07:35:50] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "[0]\ttrain-logloss:0.67687\tvalid-logloss:0.67689\n",
      "[1]\ttrain-logloss:0.66364\tvalid-logloss:0.66368\n",
      "[2]\ttrain-logloss:0.65267\tvalid-logloss:0.65273\n",
      "[3]\ttrain-logloss:0.64362\tvalid-logloss:0.64369\n",
      "[4]\ttrain-logloss:0.63628\tvalid-logloss:0.63636\n",
      "[5]\ttrain-logloss:0.63012\tvalid-logloss:0.63021\n",
      "[6]\ttrain-logloss:0.62503\tvalid-logloss:0.62514\n",
      "[7]\ttrain-logloss:0.62085\tvalid-logloss:0.62096\n",
      "[8]\ttrain-logloss:0.61741\tvalid-logloss:0.61753\n",
      "[9]\ttrain-logloss:0.61456\tvalid-logloss:0.61468\n",
      "[10]\ttrain-logloss:0.61217\tvalid-logloss:0.61230\n",
      "[11]\ttrain-logloss:0.61014\tvalid-logloss:0.61027\n",
      "[12]\ttrain-logloss:0.60844\tvalid-logloss:0.60859\n",
      "[13]\ttrain-logloss:0.60706\tvalid-logloss:0.60721\n",
      "[14]\ttrain-logloss:0.60586\tvalid-logloss:0.60601\n",
      "[15]\ttrain-logloss:0.60490\tvalid-logloss:0.60505\n",
      "[16]\ttrain-logloss:0.60404\tvalid-logloss:0.60419\n",
      "[17]\ttrain-logloss:0.60331\tvalid-logloss:0.60347\n",
      "[18]\ttrain-logloss:0.60269\tvalid-logloss:0.60285\n",
      "[19]\ttrain-logloss:0.60217\tvalid-logloss:0.60234\n",
      "[20]\ttrain-logloss:0.60169\tvalid-logloss:0.60187\n",
      "[21]\ttrain-logloss:0.60131\tvalid-logloss:0.60149\n",
      "[22]\ttrain-logloss:0.60093\tvalid-logloss:0.60112\n",
      "[23]\ttrain-logloss:0.60062\tvalid-logloss:0.60081\n",
      "[24]\ttrain-logloss:0.60035\tvalid-logloss:0.60055\n",
      "[25]\ttrain-logloss:0.60013\tvalid-logloss:0.60033\n",
      "[26]\ttrain-logloss:0.59992\tvalid-logloss:0.60013\n",
      "[27]\ttrain-logloss:0.59975\tvalid-logloss:0.59996\n",
      "[28]\ttrain-logloss:0.59959\tvalid-logloss:0.59981\n",
      "[29]\ttrain-logloss:0.59946\tvalid-logloss:0.59968\n",
      "[30]\ttrain-logloss:0.59935\tvalid-logloss:0.59958\n",
      "[31]\ttrain-logloss:0.59924\tvalid-logloss:0.59947\n",
      "[32]\ttrain-logloss:0.59913\tvalid-logloss:0.59936\n",
      "[33]\ttrain-logloss:0.59904\tvalid-logloss:0.59927\n",
      "[34]\ttrain-logloss:0.59896\tvalid-logloss:0.59919\n",
      "[35]\ttrain-logloss:0.59887\tvalid-logloss:0.59911\n",
      "[36]\ttrain-logloss:0.59880\tvalid-logloss:0.59904\n",
      "[37]\ttrain-logloss:0.59873\tvalid-logloss:0.59898\n",
      "[38]\ttrain-logloss:0.59869\tvalid-logloss:0.59894\n",
      "[39]\ttrain-logloss:0.59863\tvalid-logloss:0.59889\n",
      "[40]\ttrain-logloss:0.59859\tvalid-logloss:0.59884\n",
      "[41]\ttrain-logloss:0.59855\tvalid-logloss:0.59881\n",
      "[42]\ttrain-logloss:0.59851\tvalid-logloss:0.59877\n",
      "[43]\ttrain-logloss:0.59846\tvalid-logloss:0.59873\n",
      "[44]\ttrain-logloss:0.59843\tvalid-logloss:0.59870\n",
      "[45]\ttrain-logloss:0.59838\tvalid-logloss:0.59866\n",
      "[46]\ttrain-logloss:0.59836\tvalid-logloss:0.59864\n",
      "[47]\ttrain-logloss:0.59832\tvalid-logloss:0.59861\n",
      "[48]\ttrain-logloss:0.59830\tvalid-logloss:0.59859\n",
      "[49]\ttrain-logloss:0.59827\tvalid-logloss:0.59856\n",
      "[50]\ttrain-logloss:0.59824\tvalid-logloss:0.59854\n",
      "[51]\ttrain-logloss:0.59822\tvalid-logloss:0.59852\n",
      "[52]\ttrain-logloss:0.59820\tvalid-logloss:0.59850\n",
      "[53]\ttrain-logloss:0.59817\tvalid-logloss:0.59847\n",
      "[54]\ttrain-logloss:0.59815\tvalid-logloss:0.59846\n",
      "[55]\ttrain-logloss:0.59813\tvalid-logloss:0.59844\n",
      "[56]\ttrain-logloss:0.59811\tvalid-logloss:0.59842\n",
      "[57]\ttrain-logloss:0.59809\tvalid-logloss:0.59839\n",
      "[58]\ttrain-logloss:0.59807\tvalid-logloss:0.59838\n",
      "[59]\ttrain-logloss:0.59805\tvalid-logloss:0.59837\n",
      "[60]\ttrain-logloss:0.59802\tvalid-logloss:0.59834\n",
      "[61]\ttrain-logloss:0.59801\tvalid-logloss:0.59833\n",
      "[62]\ttrain-logloss:0.59800\tvalid-logloss:0.59832\n",
      "[63]\ttrain-logloss:0.59798\tvalid-logloss:0.59830\n",
      "[64]\ttrain-logloss:0.59796\tvalid-logloss:0.59829\n",
      "[65]\ttrain-logloss:0.59795\tvalid-logloss:0.59828\n",
      "[66]\ttrain-logloss:0.59794\tvalid-logloss:0.59827\n",
      "[67]\ttrain-logloss:0.59793\tvalid-logloss:0.59827\n",
      "[68]\ttrain-logloss:0.59791\tvalid-logloss:0.59825\n",
      "[69]\ttrain-logloss:0.59790\tvalid-logloss:0.59824\n",
      "[70]\ttrain-logloss:0.59789\tvalid-logloss:0.59824\n",
      "[71]\ttrain-logloss:0.59788\tvalid-logloss:0.59823\n",
      "[72]\ttrain-logloss:0.59787\tvalid-logloss:0.59822\n",
      "[73]\ttrain-logloss:0.59786\tvalid-logloss:0.59821\n",
      "[74]\ttrain-logloss:0.59785\tvalid-logloss:0.59820\n",
      "[75]\ttrain-logloss:0.59785\tvalid-logloss:0.59820\n",
      "[76]\ttrain-logloss:0.59784\tvalid-logloss:0.59819\n",
      "[77]\ttrain-logloss:0.59783\tvalid-logloss:0.59819\n",
      "[78]\ttrain-logloss:0.59783\tvalid-logloss:0.59818\n",
      "[79]\ttrain-logloss:0.59782\tvalid-logloss:0.59818\n",
      "[80]\ttrain-logloss:0.59781\tvalid-logloss:0.59817\n",
      "[81]\ttrain-logloss:0.59781\tvalid-logloss:0.59817\n",
      "[82]\ttrain-logloss:0.59779\tvalid-logloss:0.59816\n",
      "[83]\ttrain-logloss:0.59779\tvalid-logloss:0.59815\n",
      "[84]\ttrain-logloss:0.59778\tvalid-logloss:0.59815\n",
      "[85]\ttrain-logloss:0.59778\tvalid-logloss:0.59814\n",
      "[86]\ttrain-logloss:0.59777\tvalid-logloss:0.59814\n",
      "[87]\ttrain-logloss:0.59777\tvalid-logloss:0.59814\n",
      "[88]\ttrain-logloss:0.59776\tvalid-logloss:0.59813\n",
      "[89]\ttrain-logloss:0.59776\tvalid-logloss:0.59813\n",
      "[90]\ttrain-logloss:0.59775\tvalid-logloss:0.59813\n",
      "[91]\ttrain-logloss:0.59775\tvalid-logloss:0.59812\n",
      "[92]\ttrain-logloss:0.59774\tvalid-logloss:0.59812\n",
      "[93]\ttrain-logloss:0.59772\tvalid-logloss:0.59810\n",
      "[94]\ttrain-logloss:0.59772\tvalid-logloss:0.59809\n",
      "[95]\ttrain-logloss:0.59771\tvalid-logloss:0.59809\n",
      "[96]\ttrain-logloss:0.59769\tvalid-logloss:0.59807\n",
      "[97]\ttrain-logloss:0.59769\tvalid-logloss:0.59807\n",
      "[98]\ttrain-logloss:0.59769\tvalid-logloss:0.59807\n",
      "[99]\ttrain-logloss:0.59768\tvalid-logloss:0.59807\n",
      "[100]\ttrain-logloss:0.59768\tvalid-logloss:0.59807\n",
      "[101]\ttrain-logloss:0.59768\tvalid-logloss:0.59806\n",
      "[102]\ttrain-logloss:0.59768\tvalid-logloss:0.59806\n",
      "[103]\ttrain-logloss:0.59767\tvalid-logloss:0.59806\n",
      "[104]\ttrain-logloss:0.59766\tvalid-logloss:0.59806\n",
      "[105]\ttrain-logloss:0.59766\tvalid-logloss:0.59805\n",
      "[106]\ttrain-logloss:0.59766\tvalid-logloss:0.59805\n",
      "[107]\ttrain-logloss:0.59765\tvalid-logloss:0.59805\n",
      "[108]\ttrain-logloss:0.59764\tvalid-logloss:0.59803\n",
      "[109]\ttrain-logloss:0.59764\tvalid-logloss:0.59803\n",
      "[110]\ttrain-logloss:0.59763\tvalid-logloss:0.59803\n",
      "[111]\ttrain-logloss:0.59763\tvalid-logloss:0.59803\n",
      "[112]\ttrain-logloss:0.59763\tvalid-logloss:0.59803\n",
      "[113]\ttrain-logloss:0.59763\tvalid-logloss:0.59803\n",
      "[114]\ttrain-logloss:0.59763\tvalid-logloss:0.59803\n",
      "[115]\ttrain-logloss:0.59763\tvalid-logloss:0.59803\n",
      "[116]\ttrain-logloss:0.59762\tvalid-logloss:0.59803\n",
      "[117]\ttrain-logloss:0.59761\tvalid-logloss:0.59802\n",
      "[118]\ttrain-logloss:0.59761\tvalid-logloss:0.59802\n",
      "[119]\ttrain-logloss:0.59761\tvalid-logloss:0.59801\n"
     ]
    }
   ],
   "source": [
    "##Building XGBoost model with dmatrix approach: \n",
    "\n",
    "## Setting up monotonic constraints : \n",
    "my_tuple_1 = (1)\n",
    "N=X_train.shape[1]\n",
    "mono_array = ((my_tuple_1,) * N)\n",
    "\n",
    "params = {\n",
    "            \"objective\":'binary:logistic',\n",
    "            \"n_jobs\":4,\n",
    "            'max_depth':3,\n",
    "            'booster': 'gbtree',\n",
    "            'alpha': 0,\n",
    "            \"lambda\":0,\n",
    "            'learning_rate': 0.1,\n",
    "            \"eval_metric\":\"logloss\",\n",
    "            \"nthread\":2,\n",
    "            \"min_child_weight\" :1,\n",
    "            \"monotone_constraints\":mono_array,\n",
    "            \"early_stopping_rounds\":5\n",
    "            \n",
    "        }  \n",
    "\n",
    "\n",
    "from xgboost import train, DMatrix\n",
    "trainDmatrix = DMatrix(X_train, label=y_train, weight=train_weights.values)\n",
    "validDmatrix = DMatrix(X_val, label=y_val, weight=val_weights.values)\n",
    "\n",
    "booster_model = train(params, trainDmatrix, num_boost_round=120, \n",
    "                evals=[(trainDmatrix,'train'), (validDmatrix, 'valid')], early_stopping_rounds=5, \n",
    "                verbose_eval=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "quarterly-devil",
   "metadata": {},
   "outputs": [],
   "source": [
    "# make predictions on train, test and OOT data\n",
    "import xgboost as xgb\n",
    "\n",
    "# Convert dataset to special XGBoost optimised data structure\n",
    "dtrain = xgb.DMatrix(X_train, label=y_train,weight=train_weights.values)\n",
    "dval = xgb.DMatrix(X_val, label=y_val,weight=val_weights.values)\n",
    "dtest = xgb.DMatrix(X_test, label=y_test,weight=test_weights.values)\n",
    "doot = xgb.DMatrix(X_oot, label=y_oot,weight=oot_weights.values)\n",
    "\n",
    "y_pred_train_proba = booster_model.predict(dtrain)\n",
    "y_pred_val_proba = booster_model.predict(dval)\n",
    "y_pred_test_proba = booster_model.predict(dtest)\n",
    "y_pred_oot_proba = booster_model.predict(doot)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "green-uniform",
   "metadata": {},
   "source": [
    "## Section 3 : Model Evaluation : KS-ROC:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "prime-symphony",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Estimating KS-Roc\n",
    "\n",
    "import numpy as np\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "def ks_w2(y_real, y_proba, weight):\n",
    "    df = pd.DataFrame()\n",
    "    df['real'] = y_real\n",
    "    df['proba'] = y_proba\n",
    "    df['weight']=weight\n",
    "    \n",
    "    # Recover each class\n",
    "    df1 = df[df['real'] == 0]\n",
    "    df2 = df[df['real'] == 1]\n",
    "    \n",
    "    data1 = df1['proba']\n",
    "    data2 = df2['proba']\n",
    "    \n",
    "    wt1 = df1['weight']\n",
    "    wt2 = df2['weight']\n",
    "    \n",
    "    ix1 = np.argsort(data1)\n",
    "    ix2 = np.argsort(data2)\n",
    "    \n",
    "    data1 = data1.iloc[ix1]\n",
    "    data2 = data2.iloc[ix2]\n",
    "    wei1 = wt1.iloc[ix1]\n",
    "    wei2 = wt2.iloc[ix2]\n",
    "    \n",
    "    data = np.concatenate([data1, data2])\n",
    "    cwei1 = np.hstack([0, np.cumsum(wei1)/sum(wei1)])\n",
    "    cwei2 = np.hstack([0, np.cumsum(wei2)/sum(wei2)])\n",
    "    cdf1we = cwei1[[np.searchsorted(data1, data, side='right')]]\n",
    "    cdf2we = cwei2[[np.searchsorted(data2, data, side='right')]]\n",
    "    \n",
    "    ks_stat=np.max(np.abs(cdf1we - cdf2we))\n",
    "    roc_auc = roc_auc_score(df['real'],df['proba'],sample_weight=weight)\n",
    "    \n",
    "    Gini=2*roc_auc-1\n",
    "    \n",
    "    return ks_stat,Gini\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "upper-territory",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "featured-final",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.17359530177985316, 0.24173063919493076)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ks_w2(y_train,y_pred_train_proba,train_weights.values)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "horizontal-blood",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.17125528123791456, 0.23924626959401807)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ks_w2(y_val,y_pred_val_proba,val_weights.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "animal-uzbekistan",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.17013442472701562, 0.23810099144410168)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ks_w2(y_test,y_pred_test_proba,test_weights.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "persistent-appointment",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.19556669898836293, 0.27235100810852253)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ks_w2(y_oot,y_pred_oot_proba,oot_weights.values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "metallic-rating",
   "metadata": {},
   "source": [
    "## Capture rate analysis :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "fewer-cement",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Capture Rate P10 is :  0.159663 \n",
      "Capture Rate P20 is :  0.293144 \n",
      "Capture Rate P30 is :  0.410704 \n"
     ]
    }
   ],
   "source": [
    " \n",
    "\n",
    "df_cap_rate=pd.concat([pd.Series(y_train.values),pd.Series(y_pred_train_proba)],axis=1)\n",
    "df_cap_rate.columns=['y_train','y_train_proba']\n",
    "df_cap_rate_sorted=df_cap_rate.sort_values(by='y_train_proba')\n",
    "\n",
    "p_10_prob=df_cap_rate_sorted['y_train_proba'].quantile(0.1) \n",
    "p_20_prob=df_cap_rate_sorted['y_train_proba'].quantile(0.2) \n",
    "p_30_prob=df_cap_rate_sorted['y_train_proba'].quantile(0.3) \n",
    "\n",
    "df_cap_rate_p10=df_cap_rate_sorted[df_cap_rate_sorted['y_train_proba']<p_10_prob]\n",
    "df_cap_rate_p20=df_cap_rate_sorted[df_cap_rate_sorted['y_train_proba']<p_20_prob]\n",
    "df_cap_rate_p30=df_cap_rate_sorted[df_cap_rate_sorted['y_train_proba']<p_30_prob]\n",
    "\n",
    "n_count_p10=df_cap_rate_p10['y_train'].sum()\n",
    "n_count_p20=df_cap_rate_p20['y_train'].sum()   \n",
    "n_count_p30=df_cap_rate_p30['y_train'].sum()\n",
    "\n",
    "\n",
    "total_bads=len(df_cap_rate_sorted)-df_cap_rate_sorted['y_train'].sum()\n",
    "\n",
    "bads_10p=len(df_cap_rate_p10)-n_count_p10\n",
    "bads_20p=len(df_cap_rate_p20)-n_count_p20\n",
    "bads_30p=len(df_cap_rate_p30)-n_count_p30\n",
    "\n",
    "capture_rate_p10=bads_10p/total_bads\n",
    "capture_rate_p20=bads_20p/total_bads\n",
    "capture_rate_p30=bads_30p/total_bads\n",
    "\n",
    "print(\"Capture Rate P10 is :  %f \" %capture_rate_p10)\n",
    "print(\"Capture Rate P20 is :  %f \" %capture_rate_p20)\n",
    "print(\"Capture Rate P30 is :  %f \" %capture_rate_p30)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "considered-player",
   "metadata": {},
   "source": [
    "## Section 4 : Exploratory analysis section: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "sticky-concert",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Comparative analysis on score distribution acress train , val , test and OOT datasets:\n",
    "\n",
    "df_summary_score_train=pd.concat([y_train, 1-y_train,pd.Series(y_pred_train_proba)], axis=1)\n",
    "df_summary_score_train.columns = ['good', 'bad','Prob_Score']\n",
    "\n",
    "df_summary_score_val=pd.concat([y_val, 1-y_val,pd.Series(y_pred_val_proba)], axis=1)\n",
    "df_summary_score_val.columns = ['good', 'bad','Prob_Score']\n",
    "\n",
    "df_summary_score_oot=pd.concat([y_oot, 1-y_oot,pd.Series(y_pred_oot_proba)], axis=1)\n",
    "df_summary_score_oot.columns = ['good', 'bad','Prob_Score']\n",
    "\n",
    "df_summary_score_test=pd.concat([y_test, 1-y_test,pd.Series(y_pred_test_proba)], axis=1)\n",
    "df_summary_score_test.columns = ['good', 'bad','Prob_Score']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "excessive-douglas",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"8\" halign=\"left\">Prob_Score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>good</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>566506.0</td>\n",
       "      <td>0.665719</td>\n",
       "      <td>0.096725</td>\n",
       "      <td>0.206279</td>\n",
       "      <td>0.601872</td>\n",
       "      <td>0.681048</td>\n",
       "      <td>0.738699</td>\n",
       "      <td>0.918462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1288182.0</td>\n",
       "      <td>0.705086</td>\n",
       "      <td>0.086930</td>\n",
       "      <td>0.251825</td>\n",
       "      <td>0.662697</td>\n",
       "      <td>0.721775</td>\n",
       "      <td>0.763415</td>\n",
       "      <td>0.918462</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Prob_Score                                                              \\\n",
       "          count      mean       std       min       25%       50%       75%   \n",
       "good                                                                          \n",
       "0      566506.0  0.665719  0.096725  0.206279  0.601872  0.681048  0.738699   \n",
       "1     1288182.0  0.705086  0.086930  0.251825  0.662697  0.721775  0.763415   \n",
       "\n",
       "                \n",
       "           max  \n",
       "good            \n",
       "0     0.918462  \n",
       "1     0.918462  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_summary_score_train[['good','Prob_Score']].groupby('good').describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "worst-atlanta",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"8\" halign=\"left\">Prob_Score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>good</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>339914.0</td>\n",
       "      <td>0.666227</td>\n",
       "      <td>0.096728</td>\n",
       "      <td>0.232598</td>\n",
       "      <td>0.602107</td>\n",
       "      <td>0.681600</td>\n",
       "      <td>0.738699</td>\n",
       "      <td>0.918462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>773025.0</td>\n",
       "      <td>0.704994</td>\n",
       "      <td>0.087055</td>\n",
       "      <td>0.229019</td>\n",
       "      <td>0.662579</td>\n",
       "      <td>0.721481</td>\n",
       "      <td>0.763415</td>\n",
       "      <td>0.918462</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Prob_Score                                                              \\\n",
       "          count      mean       std       min       25%       50%       75%   \n",
       "good                                                                          \n",
       "0      339914.0  0.666227  0.096728  0.232598  0.602107  0.681600  0.738699   \n",
       "1      773025.0  0.704994  0.087055  0.229019  0.662579  0.721481  0.763415   \n",
       "\n",
       "                \n",
       "           max  \n",
       "good            \n",
       "0     0.918462  \n",
       "1     0.918462  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_summary_score_val[['good','Prob_Score']].groupby('good').describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "expired-plain",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"8\" halign=\"left\">Prob_Score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>good</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>226618.0</td>\n",
       "      <td>0.666230</td>\n",
       "      <td>0.096555</td>\n",
       "      <td>0.256002</td>\n",
       "      <td>0.602511</td>\n",
       "      <td>0.681600</td>\n",
       "      <td>0.738699</td>\n",
       "      <td>0.914317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>514647.0</td>\n",
       "      <td>0.705132</td>\n",
       "      <td>0.087223</td>\n",
       "      <td>0.242776</td>\n",
       "      <td>0.662239</td>\n",
       "      <td>0.721086</td>\n",
       "      <td>0.763415</td>\n",
       "      <td>0.918462</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Prob_Score                                                              \\\n",
       "          count      mean       std       min       25%       50%       75%   \n",
       "good                                                                          \n",
       "0      226618.0  0.666230  0.096555  0.256002  0.602511  0.681600  0.738699   \n",
       "1      514647.0  0.705132  0.087223  0.242776  0.662239  0.721086  0.763415   \n",
       "\n",
       "                \n",
       "           max  \n",
       "good            \n",
       "0     0.914317  \n",
       "1     0.918462  "
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_summary_score_test[['good','Prob_Score']].groupby('good').describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "furnished-catalyst",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"8\" halign=\"left\">Prob_Score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>good</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1182182.0</td>\n",
       "      <td>0.656716</td>\n",
       "      <td>0.10000</td>\n",
       "      <td>0.221683</td>\n",
       "      <td>0.585863</td>\n",
       "      <td>0.671273</td>\n",
       "      <td>0.734561</td>\n",
       "      <td>0.916151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3247683.0</td>\n",
       "      <td>0.702766</td>\n",
       "      <td>0.09082</td>\n",
       "      <td>0.240208</td>\n",
       "      <td>0.655972</td>\n",
       "      <td>0.719987</td>\n",
       "      <td>0.763415</td>\n",
       "      <td>0.926449</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Prob_Score                                                             \\\n",
       "          count      mean      std       min       25%       50%       75%   \n",
       "good                                                                         \n",
       "0     1182182.0  0.656716  0.10000  0.221683  0.585863  0.671273  0.734561   \n",
       "1     3247683.0  0.702766  0.09082  0.240208  0.655972  0.719987  0.763415   \n",
       "\n",
       "                \n",
       "           max  \n",
       "good            \n",
       "0     0.916151  \n",
       "1     0.926449  "
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_summary_score_oot[['good','Prob_Score']].groupby('good').describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "competitive-colony",
   "metadata": {},
   "source": [
    "# Section 5 : Model evaluation : Feature importance analysis using XGB Method : "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "clinical-newman",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from xgboost import plot_importance\n",
    "\n",
    "# plot feature importance\n",
    "plot_importance(booster_model,importance_type='total_gain',height=0.2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "numerical-passing",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variable</th>\n",
       "      <th>gains_importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>dayssincelastinquiry</td>\n",
       "      <td>113504.812500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>vendorinquiries1years</td>\n",
       "      <td>54774.718750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>uniquememberinquiries2years</td>\n",
       "      <td>48769.937500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>maximumtradelineprincipalpaidoff</td>\n",
       "      <td>36307.328125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>dayssincelastreturn</td>\n",
       "      <td>26715.216797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>applicationinquiries3years</td>\n",
       "      <td>25549.722656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>dayssincelasttradeline</td>\n",
       "      <td>11372.023438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>dailyinquiries120days</td>\n",
       "      <td>7185.105469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>paymentscompleted7years</td>\n",
       "      <td>6062.958496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>lastpaymentdisposition_COMPLETE</td>\n",
       "      <td>5647.985352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>maximumtradelineprincipal</td>\n",
       "      <td>5631.079590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>vendorinquiries180days</td>\n",
       "      <td>5616.321289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>uniquememberinquiries7years</td>\n",
       "      <td>5028.398926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>maximumtotalprincipal</td>\n",
       "      <td>3692.490479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>achreturns1years</td>\n",
       "      <td>3632.417725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>nsfreturns5years</td>\n",
       "      <td>3070.513184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>secondlastpaymentdisposition_COMPLETE</td>\n",
       "      <td>2654.406738</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>thirdlastpaymentdisposition_COMPLETE</td>\n",
       "      <td>2141.464600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>lastpaymentdisposition_RETURNED</td>\n",
       "      <td>1794.113892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>nsfreturns120days</td>\n",
       "      <td>1621.377197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>applicationinquiries60days</td>\n",
       "      <td>1315.195801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>totalpaidoffs</td>\n",
       "      <td>870.132690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>chargeoffs7years</td>\n",
       "      <td>822.434326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>dayssincelastach</td>\n",
       "      <td>738.145752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>paymentsreturned7years</td>\n",
       "      <td>682.709595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>firstpaymentreturns7years</td>\n",
       "      <td>576.143127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>secondlastpaymentdisposition_RETURNED</td>\n",
       "      <td>506.099060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>currenttradelines</td>\n",
       "      <td>441.495667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>paymentsreturned1years</td>\n",
       "      <td>374.681458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>paymentsreturned3years</td>\n",
       "      <td>244.212769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>achreturns3years</td>\n",
       "      <td>213.569824</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 Variable  gains_importance\n",
       "0                    dayssincelastinquiry     113504.812500\n",
       "1                   vendorinquiries1years      54774.718750\n",
       "2             uniquememberinquiries2years      48769.937500\n",
       "3        maximumtradelineprincipalpaidoff      36307.328125\n",
       "5                     dayssincelastreturn      26715.216797\n",
       "4              applicationinquiries3years      25549.722656\n",
       "6                  dayssincelasttradeline      11372.023438\n",
       "8                   dailyinquiries120days       7185.105469\n",
       "11                paymentscompleted7years       6062.958496\n",
       "10        lastpaymentdisposition_COMPLETE       5647.985352\n",
       "12              maximumtradelineprincipal       5631.079590\n",
       "7                  vendorinquiries180days       5616.321289\n",
       "9             uniquememberinquiries7years       5028.398926\n",
       "14                  maximumtotalprincipal       3692.490479\n",
       "13                       achreturns1years       3632.417725\n",
       "16                       nsfreturns5years       3070.513184\n",
       "20  secondlastpaymentdisposition_COMPLETE       2654.406738\n",
       "18   thirdlastpaymentdisposition_COMPLETE       2141.464600\n",
       "19        lastpaymentdisposition_RETURNED       1794.113892\n",
       "23                      nsfreturns120days       1621.377197\n",
       "24             applicationinquiries60days       1315.195801\n",
       "26                          totalpaidoffs        870.132690\n",
       "25                       chargeoffs7years        822.434326\n",
       "28                       dayssincelastach        738.145752\n",
       "15                 paymentsreturned7years        682.709595\n",
       "27              firstpaymentreturns7years        576.143127\n",
       "30  secondlastpaymentdisposition_RETURNED        506.099060\n",
       "29                      currenttradelines        441.495667\n",
       "22                 paymentsreturned1years        374.681458\n",
       "21                 paymentsreturned3years        244.212769\n",
       "17                       achreturns3years        213.569824"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# data_xgb_imp=pd.DataFrame.from_dict(booster_model.get_score(importance_type='total_gain'),orient ='index')\n",
    "gains_score=booster_model.get_score(importance_type='total_gain')\n",
    "data_xgb_imp=pd.DataFrame(gains_score.items(), columns=['Variable', 'gains_importance']).reset_index(drop=True)\n",
    "# data_xgb_imp.columns=['variable', 'gains_importance']\n",
    "data_xgb_imp.sort_values(by = \"gains_importance\", ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "charged-hundred",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_xgb_imp.nlargest(20, columns=\"gains_importance\").plot(kind='bar', figsize = (20,10)) ## plot top 40 features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "beneficial-kitchen",
   "metadata": {},
   "source": [
    "## Section 6 :Model evaluation SHAP Analysis: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "balanced-request",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import shap\n",
    "explainer = shap.TreeExplainer(booster_model)\n",
    "shap_values = explainer.shap_values(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "incoming-platinum",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x684 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "shap.summary_plot(shap_values, X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "dated-riding",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x684 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "shap.summary_plot(shap_values, features=X_train, feature_names=X_train.columns, plot_type='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "beneficial-czech",
   "metadata": {},
   "source": [
    "# Section 7: Model testing:  K-Fold cross validation to check for model's robustness and stability :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "auburn-trash",
   "metadata": {},
   "outputs": [],
   "source": [
    "## KS-RoC For Cross validation: \n",
    "\n",
    "import numpy as np\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "def ks_w2_cv(y_real, y_proba, weight):\n",
    "    df = pd.DataFrame()\n",
    "    df['real'] = y_real\n",
    "    df['proba'] = y_proba[:,1]\n",
    "    df['weight']=weight\n",
    "    \n",
    "    # Recover each class\n",
    "    df1 = df[df['real'] == 0]\n",
    "    df2 = df[df['real'] == 1]\n",
    "    \n",
    "    data1 = df1['proba']\n",
    "    data2 = df2['proba']\n",
    "    \n",
    "    wt1 = df1['weight']\n",
    "    wt2 = df2['weight']\n",
    "    \n",
    "    ix1 = np.argsort(data1)\n",
    "    ix2 = np.argsort(data2)\n",
    "    \n",
    "    data1 = data1.iloc[ix1]\n",
    "    data2 = data2.iloc[ix2]\n",
    "    wei1 = wt1.iloc[ix1]\n",
    "    wei2 = wt2.iloc[ix2]\n",
    "    \n",
    "    data = np.concatenate([data1, data2])\n",
    "    cwei1 = np.hstack([0, np.cumsum(wei1)/sum(wei1)])\n",
    "    cwei2 = np.hstack([0, np.cumsum(wei2)/sum(wei2)])\n",
    "    cdf1we = cwei1[[np.searchsorted(data1, data, side='right')]]\n",
    "    cdf2we = cwei2[[np.searchsorted(data2, data, side='right')]]\n",
    "    \n",
    "    ks_stat=np.max(np.abs(cdf1we - cdf2we))\n",
    "    roc_auc = roc_auc_score(df['real'],df['proba'],sample_weight=weight)\n",
    "    \n",
    "    Gini=2*roc_auc-1\n",
    "    \n",
    "    print(f\"KS: {ks_stat:.4f} \")\n",
    "    print(f\"ROC AUC: {roc_auc:.4f}\")\n",
    "    print(f\"Gini: {2*roc_auc-1:.4f}\")\n",
    "    \n",
    "    return ks_stat,Gini\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "conscious-morrison",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "middle-cover",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KS: 0.1734 \n",
      "ROC AUC: 0.6208\n",
      "Gini: 0.2417\n",
      "KS: 0.1734 \n",
      "ROC AUC: 0.6208\n",
      "Gini: 0.2417\n",
      "KS: 0.1713 \n",
      "ROC AUC: 0.6189\n",
      "Gini: 0.2379\n",
      "KS: 0.1713 \n",
      "ROC AUC: 0.6189\n",
      "Gini: 0.2379\n",
      "KS: 0.1733 \n",
      "ROC AUC: 0.6209\n",
      "Gini: 0.2417\n",
      "KS: 0.1733 \n",
      "ROC AUC: 0.6209\n",
      "Gini: 0.2417\n",
      "KS: 0.1716 \n",
      "ROC AUC: 0.6188\n",
      "Gini: 0.2377\n",
      "KS: 0.1716 \n",
      "ROC AUC: 0.6188\n",
      "Gini: 0.2377\n",
      "KS: 0.1733 \n",
      "ROC AUC: 0.6208\n",
      "Gini: 0.2416\n",
      "KS: 0.1733 \n",
      "ROC AUC: 0.6208\n",
      "Gini: 0.2416\n",
      "KS: 0.1744 \n",
      "ROC AUC: 0.6205\n",
      "Gini: 0.2409\n",
      "KS: 0.1744 \n",
      "ROC AUC: 0.6205\n",
      "Gini: 0.2409\n",
      "KS: 0.1728 \n",
      "ROC AUC: 0.6205\n",
      "Gini: 0.2410\n",
      "KS: 0.1728 \n",
      "ROC AUC: 0.6205\n",
      "Gini: 0.2410\n",
      "KS: 0.1764 \n",
      "ROC AUC: 0.6216\n",
      "Gini: 0.2431\n",
      "KS: 0.1764 \n",
      "ROC AUC: 0.6216\n",
      "Gini: 0.2431\n",
      "KS: 0.1734 \n",
      "ROC AUC: 0.6207\n",
      "Gini: 0.2414\n",
      "KS: 0.1734 \n",
      "ROC AUC: 0.6207\n",
      "Gini: 0.2414\n",
      "KS: 0.1722 \n",
      "ROC AUC: 0.6202\n",
      "Gini: 0.2404\n",
      "KS: 0.1722 \n",
      "ROC AUC: 0.6202\n",
      "Gini: 0.2404\n",
      "KS: 0.1731 \n",
      "ROC AUC: 0.6207\n",
      "Gini: 0.2414\n",
      "KS: 0.1731 \n",
      "ROC AUC: 0.6207\n",
      "Gini: 0.2414\n",
      "KS: 0.1743 \n",
      "ROC AUC: 0.6206\n",
      "Gini: 0.2413\n",
      "KS: 0.1743 \n",
      "ROC AUC: 0.6206\n",
      "Gini: 0.2413\n",
      "KS: 0.1731 \n",
      "ROC AUC: 0.6206\n",
      "Gini: 0.2411\n",
      "KS: 0.1731 \n",
      "ROC AUC: 0.6206\n",
      "Gini: 0.2411\n",
      "KS: 0.1744 \n",
      "ROC AUC: 0.6212\n",
      "Gini: 0.2424\n",
      "KS: 0.1744 \n",
      "ROC AUC: 0.6212\n",
      "Gini: 0.2424\n",
      "KS: 0.1733 \n",
      "ROC AUC: 0.6208\n",
      "Gini: 0.2417\n",
      "KS: 0.1733 \n",
      "ROC AUC: 0.6208\n",
      "Gini: 0.2417\n",
      "KS: 0.1715 \n",
      "ROC AUC: 0.6190\n",
      "Gini: 0.2380\n",
      "KS: 0.1715 \n",
      "ROC AUC: 0.6190\n",
      "Gini: 0.2380\n",
      "KS: 0.1734 \n",
      "ROC AUC: 0.6207\n",
      "Gini: 0.2413\n",
      "KS: 0.1734 \n",
      "ROC AUC: 0.6207\n",
      "Gini: 0.2413\n",
      "KS: 0.1705 \n",
      "ROC AUC: 0.6203\n",
      "Gini: 0.2406\n",
      "KS: 0.1705 \n",
      "ROC AUC: 0.6203\n",
      "Gini: 0.2406\n",
      "KS: 0.1731 \n",
      "ROC AUC: 0.6206\n",
      "Gini: 0.2413\n",
      "KS: 0.1731 \n",
      "ROC AUC: 0.6206\n",
      "Gini: 0.2413\n",
      "KS: 0.1741 \n",
      "ROC AUC: 0.6203\n",
      "Gini: 0.2405\n",
      "KS: 0.1741 \n",
      "ROC AUC: 0.6203\n",
      "Gini: 0.2405\n"
     ]
    }
   ],
   "source": [
    "## Stratified k-fold (10 Fold) cross validation with P10,P20 and P30 capture rate:\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "from xgboost import XGBClassifier\n",
    "import pandas as pd\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "## Setting up monotonic constraints : \n",
    "\n",
    "\n",
    "my_tuple_1 = (1)\n",
    "N=X_train.shape[1]\n",
    "mono_array = ((my_tuple_1,) * N)\n",
    "\n",
    "\n",
    "# Import Required Modules.\n",
    "from statistics import mean, stdev\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "# Create StratifiedKFold object.\n",
    "skf = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)\n",
    "lst_accu_stratified = []\n",
    "df_summary=pd.DataFrame()\n",
    "df_summary_final=pd.DataFrame()\n",
    "\n",
    "\n",
    "  \n",
    "for i,(train_index, test_index) in enumerate(skf.split(X_train, y_train, train_weights)):\n",
    "    \n",
    "    x_train_fold, x_test_fold = X_train.iloc[train_index], X_train.iloc[test_index]\n",
    "    y_train_fold, y_test_fold = y_train.iloc[train_index], y_train.iloc[test_index]\n",
    "    samp_wt_train_fold=train_weights.iloc[train_index]\n",
    "    samp_wt_test_fold=train_weights.iloc[test_index]\n",
    "    \n",
    "\n",
    "\n",
    "    params_kfold ={\n",
    "            \"objective\":'binary:logistic',\n",
    "            \"n_jobs\":4,\n",
    "            'max_depth':3,\n",
    "            'booster': 'gbtree',\n",
    "            'alpha': 0,\n",
    "            \"lambda\":0,\n",
    "            'learning_rate': 0.1,\n",
    "            \"eval_metric\":\"logloss\",\n",
    "            \"nthread\":2,\n",
    "            \"min_child_weight\" :1,\n",
    "            \"monotone_constraints\":mono_array\n",
    "            \n",
    "        }  \n",
    "\n",
    "         \n",
    "    # instantiate the classifier \n",
    "    xgb_clf_kfold = XGBClassifier(**params_kfold)\n",
    "\n",
    "    \n",
    "    xgb_clf_kfold.fit(x_train_fold, y_train_fold,sample_weight=samp_wt_train_fold.values)\n",
    "    \n",
    "    y_train_fold_proba=xgb_clf_kfold.predict_proba(x_train_fold)\n",
    "    y_test_fold_proba=xgb_clf_kfold.predict_proba(x_test_fold)\n",
    "    \n",
    "    y_pred_train_fold = xgb_clf_kfold.predict(x_train_fold)\n",
    "    y_pred_test_fold = xgb_clf_kfold.predict(x_test_fold)\n",
    "    \n",
    "    acc_score_train_fold=accuracy_score(y_train_fold, y_pred_train_fold)\n",
    "    acc_score_test_fold=accuracy_score(y_test_fold, y_pred_test_fold)\n",
    "    \n",
    "    train_fold_ks=ks_w2_cv(y_train_fold, y_train_fold_proba,samp_wt_train_fold.values)[0]\n",
    "    train_fold_gini=ks_w2_cv(y_train_fold,y_train_fold_proba,samp_wt_train_fold.values)[1]\n",
    "    \n",
    "    test_fold_ks=ks_w2_cv(y_test_fold,y_test_fold_proba,samp_wt_test_fold.values)[0]\n",
    "    test_fold_gini=ks_w2_cv(y_test_fold,y_test_fold_proba,samp_wt_test_fold.values)[1]\n",
    "    \n",
    "    \n",
    "    ##Capture rate analysis :\n",
    "    y_test_proba=pd.Series(y_test_fold_proba[:,1])\n",
    "    \n",
    "    df_cap_rate=pd.concat([pd.Series(y_test_fold.values),pd.Series(y_test_proba.values)],axis=1)\n",
    "    df_cap_rate.columns=['y_test_fold','y_test_proba']\n",
    "    df_cap_rate_sorted=df_cap_rate.sort_values(by='y_test_proba')\n",
    "    \n",
    "    p_10_prob=df_cap_rate_sorted['y_test_proba'].quantile(0.1) \n",
    "    p_20_prob=df_cap_rate_sorted['y_test_proba'].quantile(0.2) \n",
    "    p_30_prob=df_cap_rate_sorted['y_test_proba'].quantile(0.3) \n",
    "\n",
    "    df_cap_rate_p10=df_cap_rate_sorted[df_cap_rate_sorted['y_test_proba']<p_10_prob]\n",
    "    df_cap_rate_p20=df_cap_rate_sorted[df_cap_rate_sorted['y_test_proba']<p_20_prob]\n",
    "    df_cap_rate_p30=df_cap_rate_sorted[df_cap_rate_sorted['y_test_proba']<p_30_prob]\n",
    "\n",
    "    n_count_p10=df_cap_rate_p10['y_test_fold'].sum()\n",
    "    n_count_p20=df_cap_rate_p20['y_test_fold'].sum()   \n",
    "    n_count_p30=df_cap_rate_p30['y_test_fold'].sum()\n",
    "\n",
    "    \n",
    "    total_bads=len(df_cap_rate_sorted)-df_cap_rate_sorted['y_test_fold'].sum()\n",
    "    \n",
    "    bads_10p=len(df_cap_rate_p10)-n_count_p10\n",
    "    bads_20p=len(df_cap_rate_p20)-n_count_p20\n",
    "    bads_30p=len(df_cap_rate_p30)-n_count_p30\n",
    "    \n",
    "    capture_rate_p10=bads_10p/total_bads\n",
    "    capture_rate_p20=bads_20p/total_bads\n",
    "    capture_rate_p30=bads_30p/total_bads\n",
    "\n",
    "    \n",
    "    \n",
    "    ## Finally,  bringing it all under a summary table : \n",
    "    df_summary=pd.DataFrame([[i,acc_score_train_fold,acc_score_test_fold,train_fold_ks,train_fold_gini,test_fold_ks,test_fold_gini,capture_rate_p10,capture_rate_p20,capture_rate_p30,]],columns=['iteration','acc_score_train','acc_score_test','ks_train_fold','gini_train_fold','ks_test_fold','gini_test_fold','capture_rate_p10','capture_rate_p20','capture_rate_p30'])\n",
    "    \n",
    "    df_summary_final=df_summary_final.append(df_summary)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "adjusted-peoples",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iteration</th>\n",
       "      <th>acc_score_train</th>\n",
       "      <th>acc_score_test</th>\n",
       "      <th>ks_train_fold</th>\n",
       "      <th>gini_train_fold</th>\n",
       "      <th>ks_test_fold</th>\n",
       "      <th>gini_test_fold</th>\n",
       "      <th>capture_rate_p10</th>\n",
       "      <th>capture_rate_p20</th>\n",
       "      <th>capture_rate_p30</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.696610</td>\n",
       "      <td>0.696445</td>\n",
       "      <td>0.173434</td>\n",
       "      <td>0.241651</td>\n",
       "      <td>0.171320</td>\n",
       "      <td>0.237892</td>\n",
       "      <td>0.159062</td>\n",
       "      <td>0.293163</td>\n",
       "      <td>0.408695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.696520</td>\n",
       "      <td>0.696909</td>\n",
       "      <td>0.173287</td>\n",
       "      <td>0.241725</td>\n",
       "      <td>0.171626</td>\n",
       "      <td>0.237696</td>\n",
       "      <td>0.158726</td>\n",
       "      <td>0.292246</td>\n",
       "      <td>0.409860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0.696510</td>\n",
       "      <td>0.696629</td>\n",
       "      <td>0.173305</td>\n",
       "      <td>0.241586</td>\n",
       "      <td>0.174378</td>\n",
       "      <td>0.240935</td>\n",
       "      <td>0.160244</td>\n",
       "      <td>0.293305</td>\n",
       "      <td>0.409966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.696574</td>\n",
       "      <td>0.695890</td>\n",
       "      <td>0.172849</td>\n",
       "      <td>0.241035</td>\n",
       "      <td>0.176376</td>\n",
       "      <td>0.243115</td>\n",
       "      <td>0.160191</td>\n",
       "      <td>0.295688</td>\n",
       "      <td>0.412473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>0.696517</td>\n",
       "      <td>0.696688</td>\n",
       "      <td>0.173378</td>\n",
       "      <td>0.241352</td>\n",
       "      <td>0.172195</td>\n",
       "      <td>0.240435</td>\n",
       "      <td>0.158285</td>\n",
       "      <td>0.291328</td>\n",
       "      <td>0.410019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>0.696513</td>\n",
       "      <td>0.696310</td>\n",
       "      <td>0.173082</td>\n",
       "      <td>0.241375</td>\n",
       "      <td>0.174324</td>\n",
       "      <td>0.241274</td>\n",
       "      <td>0.158779</td>\n",
       "      <td>0.289915</td>\n",
       "      <td>0.409931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>0.696529</td>\n",
       "      <td>0.696715</td>\n",
       "      <td>0.173119</td>\n",
       "      <td>0.241103</td>\n",
       "      <td>0.174357</td>\n",
       "      <td>0.242431</td>\n",
       "      <td>0.159523</td>\n",
       "      <td>0.292639</td>\n",
       "      <td>0.410697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>0.696592</td>\n",
       "      <td>0.696413</td>\n",
       "      <td>0.173350</td>\n",
       "      <td>0.241677</td>\n",
       "      <td>0.171455</td>\n",
       "      <td>0.238042</td>\n",
       "      <td>0.158835</td>\n",
       "      <td>0.291192</td>\n",
       "      <td>0.408173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>0.696504</td>\n",
       "      <td>0.696492</td>\n",
       "      <td>0.173384</td>\n",
       "      <td>0.241332</td>\n",
       "      <td>0.170510</td>\n",
       "      <td>0.240555</td>\n",
       "      <td>0.159523</td>\n",
       "      <td>0.294616</td>\n",
       "      <td>0.410697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9</td>\n",
       "      <td>0.696645</td>\n",
       "      <td>0.695786</td>\n",
       "      <td>0.173073</td>\n",
       "      <td>0.241285</td>\n",
       "      <td>0.174059</td>\n",
       "      <td>0.240524</td>\n",
       "      <td>0.157511</td>\n",
       "      <td>0.290768</td>\n",
       "      <td>0.409532</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   iteration  acc_score_train  acc_score_test  ks_train_fold  gini_train_fold  \\\n",
       "0          0         0.696610        0.696445       0.173434         0.241651   \n",
       "0          1         0.696520        0.696909       0.173287         0.241725   \n",
       "0          2         0.696510        0.696629       0.173305         0.241586   \n",
       "0          3         0.696574        0.695890       0.172849         0.241035   \n",
       "0          4         0.696517        0.696688       0.173378         0.241352   \n",
       "0          5         0.696513        0.696310       0.173082         0.241375   \n",
       "0          6         0.696529        0.696715       0.173119         0.241103   \n",
       "0          7         0.696592        0.696413       0.173350         0.241677   \n",
       "0          8         0.696504        0.696492       0.173384         0.241332   \n",
       "0          9         0.696645        0.695786       0.173073         0.241285   \n",
       "\n",
       "   ks_test_fold  gini_test_fold  capture_rate_p10  capture_rate_p20  \\\n",
       "0      0.171320        0.237892          0.159062          0.293163   \n",
       "0      0.171626        0.237696          0.158726          0.292246   \n",
       "0      0.174378        0.240935          0.160244          0.293305   \n",
       "0      0.176376        0.243115          0.160191          0.295688   \n",
       "0      0.172195        0.240435          0.158285          0.291328   \n",
       "0      0.174324        0.241274          0.158779          0.289915   \n",
       "0      0.174357        0.242431          0.159523          0.292639   \n",
       "0      0.171455        0.238042          0.158835          0.291192   \n",
       "0      0.170510        0.240555          0.159523          0.294616   \n",
       "0      0.174059        0.240524          0.157511          0.290768   \n",
       "\n",
       "   capture_rate_p30  \n",
       "0          0.408695  \n",
       "0          0.409860  \n",
       "0          0.409966  \n",
       "0          0.412473  \n",
       "0          0.410019  \n",
       "0          0.409931  \n",
       "0          0.410697  \n",
       "0          0.408173  \n",
       "0          0.410697  \n",
       "0          0.409532  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_summary_final"
   ]
  },
  {
   "attachments": {
    "b630565f-dc5b-4ca0-89ca-37725fc2c2ba.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "adaptive-woman",
   "metadata": {},
   "source": [
    "Point to note: The KS, gini and capture rates have been taken from the results oming from the test fold of each iteration. Please use the below columns from python output for the reporting purpose:\n",
    "\n",
    "![image.png](attachment:b630565f-dc5b-4ca0-89ca-37725fc2c2ba.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "tested-dating",
   "metadata": {},
   "source": [
    "## Section 8: Sensitivity analsyis :"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "backed-narrative",
   "metadata": {},
   "source": [
    "- We are changing only 3 hyp parameters under this testing. max_depth, learning_rate and n_estimators. Please create a range of values for each of these parameters by considering +/- 10% from the original model numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "laughing-railway",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[09:01:24] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7f00ac0df7c0>\n",
      "[09:04:16] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1820>\n",
      "[09:07:22] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1b50>\n",
      "[09:10:39] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1ee0>\n",
      "[09:13:24] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1820>\n",
      "[09:16:27] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1af0>\n",
      "[09:19:45] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1dc0>\n",
      "[09:22:30] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1ee0>\n",
      "[09:25:33] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1dc0>\n",
      "[09:28:48] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1730>\n",
      "[09:32:16] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1a00>\n",
      "[09:36:01] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1a90>\n",
      "[09:40:09] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad18e0>\n",
      "[09:43:36] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1730>\n",
      "[09:47:25] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad18b0>\n",
      "[09:51:32] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1eb0>\n",
      "[09:54:56] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1700>\n",
      "[09:58:39] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1ac0>\n",
      "[10:02:44] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1880>\n",
      "[10:06:51] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1910>\n",
      "[10:11:26] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1eb0>\n",
      "[10:16:26] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1910>\n",
      "[10:20:36] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1dc0>\n",
      "[10:25:14] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1700>\n",
      "[10:30:15] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1dc0>\n",
      "[10:34:24] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1c70>\n",
      "[10:39:00] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "<xgboost.core.Booster object at 0x7efd51ad1700>\n"
     ]
    }
   ],
   "source": [
    "from xgboost import train, DMatrix\n",
    "import xgboost as xgb\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "df_summary_sens=pd.DataFrame()\n",
    "df_summary_final_sensitivity=pd.DataFrame()\n",
    "\n",
    "#Fix the range of hyp- parameters here : \n",
    "\n",
    "max_depth_list=[2,3,4]\n",
    "learn_rate_list =[0.09,0.1,0.11]\n",
    "num_boost_round_list= [108,120,132]\n",
    "\n",
    "# Convert dataset to special XGBoost optimised data structure\n",
    "dtrain = xgb.DMatrix(X_train, label=y_train,weight=train_weights.values)\n",
    "dval = xgb.DMatrix(X_val, label=y_val,weight=val_weights.values)\n",
    "dtest = xgb.DMatrix(X_test, label=y_test,weight=test_weights.values)\n",
    "doot = xgb.DMatrix(X_oot, label=y_oot,weight=oot_weights.values)\n",
    "\n",
    "trainDmatrix = DMatrix(X_train, label=y_train, weight=train_weights.values)\n",
    "validDmatrix = DMatrix(X_val, label=y_val, weight=val_weights.values)\n",
    "\n",
    "\n",
    "## Setting up monotonic constraints : \n",
    "my_tuple_1 = (1)\n",
    "N=X_train.shape[1]\n",
    "mono_array = ((my_tuple_1,) * N)\n",
    "\n",
    "\n",
    "## Runn 3 loops for 3 hyp parameters (Total 27 models would be built): \n",
    "\n",
    "for i in range(len(max_depth_list)):\n",
    "    \n",
    "    for j in range(len(learn_rate_list)):\n",
    "        \n",
    "        for k in range(len(num_boost_round_list)):\n",
    "            \n",
    "\n",
    "            depth=max_depth_list[i]\n",
    "            learn_rate=learn_rate_list[j]\n",
    "            n_estimator=num_boost_round_list[k]\n",
    "    \n",
    "\n",
    "            params_senstvt ={\n",
    "                    \"objective\":'binary:logistic',\n",
    "                    \"n_jobs\":4,\n",
    "                    'max_depth':depth,\n",
    "                    'booster': 'gbtree',\n",
    "                    'alpha': 0,\n",
    "                    \"lambda\":0,\n",
    "                    'learning_rate':learn_rate,\n",
    "                    \"eval_metric\":\"logloss\",\n",
    "                    \"nthread\":2,\n",
    "                    \"min_child_weight\" :1,\n",
    "                    \"monotone_constraints\":mono_array,\n",
    "                    \"early_stopping_rounds\":5\n",
    "                }  \n",
    "        \n",
    "\n",
    "\n",
    "            booster_model_senstvt = train(params_senstvt, trainDmatrix,num_boost_round=n_estimator,\n",
    "                        evals=[(trainDmatrix,'train'), (validDmatrix, 'valid')], \n",
    "                        verbose_eval=0)\n",
    "\n",
    "            # make probability predictions on train, test and OOT data\n",
    "\n",
    "            y_pred_train_proba = booster_model_senstvt.predict(dtrain)\n",
    "            y_pred_val_proba = booster_model_senstvt.predict(dval)\n",
    "            y_pred_test_proba = booster_model_senstvt.predict(dtest)\n",
    "            y_pred_oot_proba = booster_model_senstvt.predict(doot)\n",
    "\n",
    "\n",
    "            # Compute Ks-Gini :\n",
    "            train_ks=ks_w2(y_train,y_pred_train_proba,train_weights.values)[0]\n",
    "            train_gini=ks_w2(y_train,y_pred_train_proba,train_weights.values)[1]\n",
    "\n",
    "            val_ks=ks_w2(y_val,y_pred_val_proba,val_weights.values)[0]\n",
    "            val_gini=ks_w2(y_val,y_pred_val_proba,val_weights.values)[1]\n",
    "\n",
    "            test_ks=ks_w2(y_test,y_pred_test_proba,test_weights.values)[0]\n",
    "            test_gini=ks_w2(y_test,y_pred_test_proba,test_weights.values)[1]\n",
    "\n",
    "            oot_ks=ks_w2(y_oot,y_pred_oot_proba,oot_weights.values)[0]\n",
    "            oot_gini=ks_w2(y_oot,y_pred_oot_proba,oot_weights.values)[1]\n",
    "            \n",
    "            print(booster_model_senstvt)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "            ## Finally, the summary table:\n",
    "            \n",
    "            df_summary_sens=pd.DataFrame([[depth,learn_rate,n_estimator,train_ks,train_gini,val_ks,val_gini,test_ks,test_gini,oot_ks,oot_gini]],columns=['max_depth','learning_rate','n_estimator','train_ks','train_gini','val_ks','val_gini','test_ks','test_gini','oot_ks','oot_gini'])\n",
    "\n",
    "            df_summary_final_sensitivity=df_summary_final_sensitivity.append(df_summary_sens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "legislative-calibration",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max_depth</th>\n",
       "      <th>learning_rate</th>\n",
       "      <th>n_estimator</th>\n",
       "      <th>train_ks</th>\n",
       "      <th>train_gini</th>\n",
       "      <th>val_ks</th>\n",
       "      <th>val_gini</th>\n",
       "      <th>test_ks</th>\n",
       "      <th>test_gini</th>\n",
       "      <th>oot_ks</th>\n",
       "      <th>oot_gini</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0.09</td>\n",
       "      <td>108</td>\n",
       "      <td>0.171142</td>\n",
       "      <td>0.238467</td>\n",
       "      <td>0.169135</td>\n",
       "      <td>0.236278</td>\n",
       "      <td>0.168341</td>\n",
       "      <td>0.235244</td>\n",
       "      <td>0.192782</td>\n",
       "      <td>0.268653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0.09</td>\n",
       "      <td>120</td>\n",
       "      <td>0.171627</td>\n",
       "      <td>0.238849</td>\n",
       "      <td>0.169516</td>\n",
       "      <td>0.236624</td>\n",
       "      <td>0.168494</td>\n",
       "      <td>0.235540</td>\n",
       "      <td>0.193333</td>\n",
       "      <td>0.269105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0.09</td>\n",
       "      <td>132</td>\n",
       "      <td>0.171788</td>\n",
       "      <td>0.239210</td>\n",
       "      <td>0.169766</td>\n",
       "      <td>0.236949</td>\n",
       "      <td>0.168746</td>\n",
       "      <td>0.235862</td>\n",
       "      <td>0.193790</td>\n",
       "      <td>0.269496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0.10</td>\n",
       "      <td>108</td>\n",
       "      <td>0.171712</td>\n",
       "      <td>0.239094</td>\n",
       "      <td>0.169623</td>\n",
       "      <td>0.236839</td>\n",
       "      <td>0.168615</td>\n",
       "      <td>0.235924</td>\n",
       "      <td>0.193558</td>\n",
       "      <td>0.269487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0.10</td>\n",
       "      <td>120</td>\n",
       "      <td>0.171807</td>\n",
       "      <td>0.239437</td>\n",
       "      <td>0.169816</td>\n",
       "      <td>0.237178</td>\n",
       "      <td>0.168845</td>\n",
       "      <td>0.236249</td>\n",
       "      <td>0.193928</td>\n",
       "      <td>0.269919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0.10</td>\n",
       "      <td>132</td>\n",
       "      <td>0.172073</td>\n",
       "      <td>0.239687</td>\n",
       "      <td>0.170048</td>\n",
       "      <td>0.237412</td>\n",
       "      <td>0.168996</td>\n",
       "      <td>0.236417</td>\n",
       "      <td>0.194244</td>\n",
       "      <td>0.270116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0.11</td>\n",
       "      <td>108</td>\n",
       "      <td>0.171941</td>\n",
       "      <td>0.239338</td>\n",
       "      <td>0.170050</td>\n",
       "      <td>0.237049</td>\n",
       "      <td>0.168895</td>\n",
       "      <td>0.235928</td>\n",
       "      <td>0.193873</td>\n",
       "      <td>0.269643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0.11</td>\n",
       "      <td>120</td>\n",
       "      <td>0.172167</td>\n",
       "      <td>0.239571</td>\n",
       "      <td>0.170311</td>\n",
       "      <td>0.237285</td>\n",
       "      <td>0.168890</td>\n",
       "      <td>0.236117</td>\n",
       "      <td>0.194154</td>\n",
       "      <td>0.269882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0.11</td>\n",
       "      <td>132</td>\n",
       "      <td>0.172415</td>\n",
       "      <td>0.239850</td>\n",
       "      <td>0.170760</td>\n",
       "      <td>0.237552</td>\n",
       "      <td>0.169268</td>\n",
       "      <td>0.236364</td>\n",
       "      <td>0.194434</td>\n",
       "      <td>0.270186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.09</td>\n",
       "      <td>108</td>\n",
       "      <td>0.173221</td>\n",
       "      <td>0.241305</td>\n",
       "      <td>0.170885</td>\n",
       "      <td>0.238838</td>\n",
       "      <td>0.169870</td>\n",
       "      <td>0.237832</td>\n",
       "      <td>0.195259</td>\n",
       "      <td>0.271843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.09</td>\n",
       "      <td>120</td>\n",
       "      <td>0.173432</td>\n",
       "      <td>0.241553</td>\n",
       "      <td>0.170936</td>\n",
       "      <td>0.239047</td>\n",
       "      <td>0.170021</td>\n",
       "      <td>0.238016</td>\n",
       "      <td>0.195470</td>\n",
       "      <td>0.272077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.09</td>\n",
       "      <td>132</td>\n",
       "      <td>0.173778</td>\n",
       "      <td>0.241739</td>\n",
       "      <td>0.171163</td>\n",
       "      <td>0.239205</td>\n",
       "      <td>0.170134</td>\n",
       "      <td>0.238169</td>\n",
       "      <td>0.195616</td>\n",
       "      <td>0.272237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.10</td>\n",
       "      <td>108</td>\n",
       "      <td>0.173444</td>\n",
       "      <td>0.241508</td>\n",
       "      <td>0.171117</td>\n",
       "      <td>0.239035</td>\n",
       "      <td>0.170041</td>\n",
       "      <td>0.237934</td>\n",
       "      <td>0.195440</td>\n",
       "      <td>0.272103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.10</td>\n",
       "      <td>120</td>\n",
       "      <td>0.173595</td>\n",
       "      <td>0.241731</td>\n",
       "      <td>0.171255</td>\n",
       "      <td>0.239246</td>\n",
       "      <td>0.170134</td>\n",
       "      <td>0.238101</td>\n",
       "      <td>0.195567</td>\n",
       "      <td>0.272351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.10</td>\n",
       "      <td>132</td>\n",
       "      <td>0.173765</td>\n",
       "      <td>0.241885</td>\n",
       "      <td>0.171447</td>\n",
       "      <td>0.239396</td>\n",
       "      <td>0.170200</td>\n",
       "      <td>0.238246</td>\n",
       "      <td>0.195722</td>\n",
       "      <td>0.272554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.11</td>\n",
       "      <td>108</td>\n",
       "      <td>0.173264</td>\n",
       "      <td>0.241721</td>\n",
       "      <td>0.171330</td>\n",
       "      <td>0.239286</td>\n",
       "      <td>0.170241</td>\n",
       "      <td>0.238140</td>\n",
       "      <td>0.195763</td>\n",
       "      <td>0.272535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.11</td>\n",
       "      <td>120</td>\n",
       "      <td>0.173450</td>\n",
       "      <td>0.241907</td>\n",
       "      <td>0.171557</td>\n",
       "      <td>0.239455</td>\n",
       "      <td>0.170328</td>\n",
       "      <td>0.238291</td>\n",
       "      <td>0.195975</td>\n",
       "      <td>0.272737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.11</td>\n",
       "      <td>132</td>\n",
       "      <td>0.173701</td>\n",
       "      <td>0.242059</td>\n",
       "      <td>0.171587</td>\n",
       "      <td>0.239573</td>\n",
       "      <td>0.170416</td>\n",
       "      <td>0.238430</td>\n",
       "      <td>0.196138</td>\n",
       "      <td>0.272865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>0.09</td>\n",
       "      <td>108</td>\n",
       "      <td>0.174107</td>\n",
       "      <td>0.242852</td>\n",
       "      <td>0.172019</td>\n",
       "      <td>0.240296</td>\n",
       "      <td>0.170597</td>\n",
       "      <td>0.239218</td>\n",
       "      <td>0.196032</td>\n",
       "      <td>0.273451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>0.09</td>\n",
       "      <td>120</td>\n",
       "      <td>0.174316</td>\n",
       "      <td>0.243044</td>\n",
       "      <td>0.172116</td>\n",
       "      <td>0.240452</td>\n",
       "      <td>0.170686</td>\n",
       "      <td>0.239343</td>\n",
       "      <td>0.196244</td>\n",
       "      <td>0.273670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>0.09</td>\n",
       "      <td>132</td>\n",
       "      <td>0.174393</td>\n",
       "      <td>0.243188</td>\n",
       "      <td>0.172130</td>\n",
       "      <td>0.240569</td>\n",
       "      <td>0.170846</td>\n",
       "      <td>0.239464</td>\n",
       "      <td>0.196314</td>\n",
       "      <td>0.273783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>0.10</td>\n",
       "      <td>108</td>\n",
       "      <td>0.174425</td>\n",
       "      <td>0.243075</td>\n",
       "      <td>0.172139</td>\n",
       "      <td>0.240516</td>\n",
       "      <td>0.170747</td>\n",
       "      <td>0.239534</td>\n",
       "      <td>0.196256</td>\n",
       "      <td>0.273809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>0.10</td>\n",
       "      <td>120</td>\n",
       "      <td>0.174603</td>\n",
       "      <td>0.243229</td>\n",
       "      <td>0.172161</td>\n",
       "      <td>0.240628</td>\n",
       "      <td>0.171004</td>\n",
       "      <td>0.239645</td>\n",
       "      <td>0.196372</td>\n",
       "      <td>0.273916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>0.10</td>\n",
       "      <td>132</td>\n",
       "      <td>0.174730</td>\n",
       "      <td>0.243329</td>\n",
       "      <td>0.172198</td>\n",
       "      <td>0.240702</td>\n",
       "      <td>0.170998</td>\n",
       "      <td>0.239717</td>\n",
       "      <td>0.196452</td>\n",
       "      <td>0.274001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>0.11</td>\n",
       "      <td>108</td>\n",
       "      <td>0.174358</td>\n",
       "      <td>0.243128</td>\n",
       "      <td>0.172108</td>\n",
       "      <td>0.240436</td>\n",
       "      <td>0.170952</td>\n",
       "      <td>0.239479</td>\n",
       "      <td>0.196125</td>\n",
       "      <td>0.273761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>0.11</td>\n",
       "      <td>120</td>\n",
       "      <td>0.174458</td>\n",
       "      <td>0.243260</td>\n",
       "      <td>0.172077</td>\n",
       "      <td>0.240516</td>\n",
       "      <td>0.171022</td>\n",
       "      <td>0.239587</td>\n",
       "      <td>0.196184</td>\n",
       "      <td>0.273886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>0.11</td>\n",
       "      <td>132</td>\n",
       "      <td>0.174469</td>\n",
       "      <td>0.243281</td>\n",
       "      <td>0.172103</td>\n",
       "      <td>0.240539</td>\n",
       "      <td>0.171079</td>\n",
       "      <td>0.239600</td>\n",
       "      <td>0.196218</td>\n",
       "      <td>0.273898</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   max_depth  learning_rate  n_estimator  train_ks  train_gini    val_ks  \\\n",
       "0          2           0.09          108  0.171142    0.238467  0.169135   \n",
       "0          2           0.09          120  0.171627    0.238849  0.169516   \n",
       "0          2           0.09          132  0.171788    0.239210  0.169766   \n",
       "0          2           0.10          108  0.171712    0.239094  0.169623   \n",
       "0          2           0.10          120  0.171807    0.239437  0.169816   \n",
       "0          2           0.10          132  0.172073    0.239687  0.170048   \n",
       "0          2           0.11          108  0.171941    0.239338  0.170050   \n",
       "0          2           0.11          120  0.172167    0.239571  0.170311   \n",
       "0          2           0.11          132  0.172415    0.239850  0.170760   \n",
       "0          3           0.09          108  0.173221    0.241305  0.170885   \n",
       "0          3           0.09          120  0.173432    0.241553  0.170936   \n",
       "0          3           0.09          132  0.173778    0.241739  0.171163   \n",
       "0          3           0.10          108  0.173444    0.241508  0.171117   \n",
       "0          3           0.10          120  0.173595    0.241731  0.171255   \n",
       "0          3           0.10          132  0.173765    0.241885  0.171447   \n",
       "0          3           0.11          108  0.173264    0.241721  0.171330   \n",
       "0          3           0.11          120  0.173450    0.241907  0.171557   \n",
       "0          3           0.11          132  0.173701    0.242059  0.171587   \n",
       "0          4           0.09          108  0.174107    0.242852  0.172019   \n",
       "0          4           0.09          120  0.174316    0.243044  0.172116   \n",
       "0          4           0.09          132  0.174393    0.243188  0.172130   \n",
       "0          4           0.10          108  0.174425    0.243075  0.172139   \n",
       "0          4           0.10          120  0.174603    0.243229  0.172161   \n",
       "0          4           0.10          132  0.174730    0.243329  0.172198   \n",
       "0          4           0.11          108  0.174358    0.243128  0.172108   \n",
       "0          4           0.11          120  0.174458    0.243260  0.172077   \n",
       "0          4           0.11          132  0.174469    0.243281  0.172103   \n",
       "\n",
       "   val_gini   test_ks  test_gini    oot_ks  oot_gini  \n",
       "0  0.236278  0.168341   0.235244  0.192782  0.268653  \n",
       "0  0.236624  0.168494   0.235540  0.193333  0.269105  \n",
       "0  0.236949  0.168746   0.235862  0.193790  0.269496  \n",
       "0  0.236839  0.168615   0.235924  0.193558  0.269487  \n",
       "0  0.237178  0.168845   0.236249  0.193928  0.269919  \n",
       "0  0.237412  0.168996   0.236417  0.194244  0.270116  \n",
       "0  0.237049  0.168895   0.235928  0.193873  0.269643  \n",
       "0  0.237285  0.168890   0.236117  0.194154  0.269882  \n",
       "0  0.237552  0.169268   0.236364  0.194434  0.270186  \n",
       "0  0.238838  0.169870   0.237832  0.195259  0.271843  \n",
       "0  0.239047  0.170021   0.238016  0.195470  0.272077  \n",
       "0  0.239205  0.170134   0.238169  0.195616  0.272237  \n",
       "0  0.239035  0.170041   0.237934  0.195440  0.272103  \n",
       "0  0.239246  0.170134   0.238101  0.195567  0.272351  \n",
       "0  0.239396  0.170200   0.238246  0.195722  0.272554  \n",
       "0  0.239286  0.170241   0.238140  0.195763  0.272535  \n",
       "0  0.239455  0.170328   0.238291  0.195975  0.272737  \n",
       "0  0.239573  0.170416   0.238430  0.196138  0.272865  \n",
       "0  0.240296  0.170597   0.239218  0.196032  0.273451  \n",
       "0  0.240452  0.170686   0.239343  0.196244  0.273670  \n",
       "0  0.240569  0.170846   0.239464  0.196314  0.273783  \n",
       "0  0.240516  0.170747   0.239534  0.196256  0.273809  \n",
       "0  0.240628  0.171004   0.239645  0.196372  0.273916  \n",
       "0  0.240702  0.170998   0.239717  0.196452  0.274001  \n",
       "0  0.240436  0.170952   0.239479  0.196125  0.273761  \n",
       "0  0.240516  0.171022   0.239587  0.196184  0.273886  \n",
       "0  0.240539  0.171079   0.239600  0.196218  0.273898  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_summary_final_sensitivity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "dominant-carroll",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max_depth</th>\n",
       "      <th>learning_rate</th>\n",
       "      <th>n_estimator</th>\n",
       "      <th>train_ks</th>\n",
       "      <th>train_gini</th>\n",
       "      <th>val_ks</th>\n",
       "      <th>val_gini</th>\n",
       "      <th>test_ks</th>\n",
       "      <th>test_gini</th>\n",
       "      <th>oot_ks</th>\n",
       "      <th>oot_gini</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0.10</td>\n",
       "      <td>120</td>\n",
       "      <td>0.171807</td>\n",
       "      <td>0.239437</td>\n",
       "      <td>0.169816</td>\n",
       "      <td>0.237178</td>\n",
       "      <td>0.168845</td>\n",
       "      <td>0.236249</td>\n",
       "      <td>0.193928</td>\n",
       "      <td>0.269919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.09</td>\n",
       "      <td>120</td>\n",
       "      <td>0.173432</td>\n",
       "      <td>0.241553</td>\n",
       "      <td>0.170936</td>\n",
       "      <td>0.239047</td>\n",
       "      <td>0.170021</td>\n",
       "      <td>0.238016</td>\n",
       "      <td>0.195470</td>\n",
       "      <td>0.272077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.10</td>\n",
       "      <td>108</td>\n",
       "      <td>0.173444</td>\n",
       "      <td>0.241508</td>\n",
       "      <td>0.171117</td>\n",
       "      <td>0.239035</td>\n",
       "      <td>0.170041</td>\n",
       "      <td>0.237934</td>\n",
       "      <td>0.195440</td>\n",
       "      <td>0.272103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.10</td>\n",
       "      <td>120</td>\n",
       "      <td>0.173595</td>\n",
       "      <td>0.241731</td>\n",
       "      <td>0.171255</td>\n",
       "      <td>0.239246</td>\n",
       "      <td>0.170134</td>\n",
       "      <td>0.238101</td>\n",
       "      <td>0.195567</td>\n",
       "      <td>0.272351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.10</td>\n",
       "      <td>132</td>\n",
       "      <td>0.173765</td>\n",
       "      <td>0.241885</td>\n",
       "      <td>0.171447</td>\n",
       "      <td>0.239396</td>\n",
       "      <td>0.170200</td>\n",
       "      <td>0.238246</td>\n",
       "      <td>0.195722</td>\n",
       "      <td>0.272554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.11</td>\n",
       "      <td>120</td>\n",
       "      <td>0.173450</td>\n",
       "      <td>0.241907</td>\n",
       "      <td>0.171557</td>\n",
       "      <td>0.239455</td>\n",
       "      <td>0.170328</td>\n",
       "      <td>0.238291</td>\n",
       "      <td>0.195975</td>\n",
       "      <td>0.272737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>0.10</td>\n",
       "      <td>120</td>\n",
       "      <td>0.174603</td>\n",
       "      <td>0.243229</td>\n",
       "      <td>0.172161</td>\n",
       "      <td>0.240628</td>\n",
       "      <td>0.171004</td>\n",
       "      <td>0.239645</td>\n",
       "      <td>0.196372</td>\n",
       "      <td>0.273916</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   max_depth  learning_rate  n_estimator  train_ks  train_gini    val_ks  \\\n",
       "0          2           0.10          120  0.171807    0.239437  0.169816   \n",
       "0          3           0.09          120  0.173432    0.241553  0.170936   \n",
       "0          3           0.10          108  0.173444    0.241508  0.171117   \n",
       "0          3           0.10          120  0.173595    0.241731  0.171255   \n",
       "0          3           0.10          132  0.173765    0.241885  0.171447   \n",
       "0          3           0.11          120  0.173450    0.241907  0.171557   \n",
       "0          4           0.10          120  0.174603    0.243229  0.172161   \n",
       "\n",
       "   val_gini   test_ks  test_gini    oot_ks  oot_gini  \n",
       "0  0.237178  0.168845   0.236249  0.193928  0.269919  \n",
       "0  0.239047  0.170021   0.238016  0.195470  0.272077  \n",
       "0  0.239035  0.170041   0.237934  0.195440  0.272103  \n",
       "0  0.239246  0.170134   0.238101  0.195567  0.272351  \n",
       "0  0.239396  0.170200   0.238246  0.195722  0.272554  \n",
       "0  0.239455  0.170328   0.238291  0.195975  0.272737  \n",
       "0  0.240628  0.171004   0.239645  0.196372  0.273916  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Let us now only select those 6 combinations apart from our final model, where we are changing the parameters one at a time keeping all others fixed:\n",
    "\n",
    "## copy paste this tabale to excel and present in the below format: \n",
    "\n",
    "final_senstvt_seg6=df_summary_final_sensitivity[((df_summary_final_sensitivity['max_depth']==3) & (df_summary_final_sensitivity['learning_rate']==0.1)) | ((df_summary_final_sensitivity['max_depth']==3) & (df_summary_final_sensitivity['n_estimator']==120)) |\n",
    "                                               ((df_summary_final_sensitivity['learning_rate']==0.1) & (df_summary_final_sensitivity['n_estimator']==120))]\n",
    "\n",
    "final_senstvt_seg6.sort_values(by=['max_depth','learning_rate','n_estimator'])"
   ]
  },
  {
   "attachments": {
    "d93efcaf-4f0f-4a8b-a0d3-3396952ec5a9.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "gorgeous-error",
   "metadata": {},
   "source": [
    "![image.png](attachment:d93efcaf-4f0f-4a8b-a0d3-3396952ec5a9.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "basic-degree",
   "metadata": {},
   "source": [
    "## Section 9 :Model rerun with top vairables where 99% or 95% lift is achieved: "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "changing-delta",
   "metadata": {},
   "source": [
    "- If you have a lot of variable beyond 95/99 % cumulative lift; please select the variables where you achieve a 99% or 95% lift and then re run the model and check whether Ks, Gini  are similar or not:\n",
    "    \n",
    "- For my model (Segment 6) : I have 31 variables and a 99% cumulative lift is achieved at the 23rd variable. Hence I reran the model by ommiting last 8 variables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "vietnamese-tension",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[09:34:01] WARNING: ../src/learner.cc:627: \n",
      "Parameters: { \"early_stopping_rounds\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "[0]\ttrain-logloss:0.67687\tvalid-logloss:0.67689\n",
      "[1]\ttrain-logloss:0.66364\tvalid-logloss:0.66368\n",
      "[2]\ttrain-logloss:0.65267\tvalid-logloss:0.65273\n",
      "[3]\ttrain-logloss:0.64362\tvalid-logloss:0.64369\n",
      "[4]\ttrain-logloss:0.63628\tvalid-logloss:0.63636\n",
      "[5]\ttrain-logloss:0.63012\tvalid-logloss:0.63021\n",
      "[6]\ttrain-logloss:0.62503\tvalid-logloss:0.62514\n",
      "[7]\ttrain-logloss:0.62085\tvalid-logloss:0.62096\n",
      "[8]\ttrain-logloss:0.61741\tvalid-logloss:0.61753\n",
      "[9]\ttrain-logloss:0.61456\tvalid-logloss:0.61468\n",
      "[10]\ttrain-logloss:0.61217\tvalid-logloss:0.61230\n",
      "[11]\ttrain-logloss:0.61014\tvalid-logloss:0.61027\n",
      "[12]\ttrain-logloss:0.60844\tvalid-logloss:0.60859\n",
      "[13]\ttrain-logloss:0.60707\tvalid-logloss:0.60721\n",
      "[14]\ttrain-logloss:0.60586\tvalid-logloss:0.60601\n",
      "[15]\ttrain-logloss:0.60490\tvalid-logloss:0.60505\n",
      "[16]\ttrain-logloss:0.60404\tvalid-logloss:0.60419\n",
      "[17]\ttrain-logloss:0.60331\tvalid-logloss:0.60347\n",
      "[18]\ttrain-logloss:0.60269\tvalid-logloss:0.60285\n",
      "[19]\ttrain-logloss:0.60217\tvalid-logloss:0.60234\n",
      "[20]\ttrain-logloss:0.60169\tvalid-logloss:0.60187\n",
      "[21]\ttrain-logloss:0.60131\tvalid-logloss:0.60149\n",
      "[22]\ttrain-logloss:0.60093\tvalid-logloss:0.60112\n",
      "[23]\ttrain-logloss:0.60062\tvalid-logloss:0.60081\n",
      "[24]\ttrain-logloss:0.60035\tvalid-logloss:0.60054\n",
      "[25]\ttrain-logloss:0.60013\tvalid-logloss:0.60033\n",
      "[26]\ttrain-logloss:0.59992\tvalid-logloss:0.60013\n",
      "[27]\ttrain-logloss:0.59975\tvalid-logloss:0.59996\n",
      "[28]\ttrain-logloss:0.59960\tvalid-logloss:0.59981\n",
      "[29]\ttrain-logloss:0.59946\tvalid-logloss:0.59968\n",
      "[30]\ttrain-logloss:0.59935\tvalid-logloss:0.59958\n",
      "[31]\ttrain-logloss:0.59924\tvalid-logloss:0.59947\n",
      "[32]\ttrain-logloss:0.59914\tvalid-logloss:0.59936\n",
      "[33]\ttrain-logloss:0.59904\tvalid-logloss:0.59927\n",
      "[34]\ttrain-logloss:0.59895\tvalid-logloss:0.59919\n",
      "[35]\ttrain-logloss:0.59889\tvalid-logloss:0.59913\n",
      "[36]\ttrain-logloss:0.59882\tvalid-logloss:0.59906\n",
      "[37]\ttrain-logloss:0.59877\tvalid-logloss:0.59901\n",
      "[38]\ttrain-logloss:0.59871\tvalid-logloss:0.59896\n",
      "[39]\ttrain-logloss:0.59865\tvalid-logloss:0.59890\n",
      "[40]\ttrain-logloss:0.59861\tvalid-logloss:0.59887\n",
      "[41]\ttrain-logloss:0.59855\tvalid-logloss:0.59882\n",
      "[42]\ttrain-logloss:0.59851\tvalid-logloss:0.59878\n",
      "[43]\ttrain-logloss:0.59847\tvalid-logloss:0.59874\n",
      "[44]\ttrain-logloss:0.59845\tvalid-logloss:0.59871\n",
      "[45]\ttrain-logloss:0.59841\tvalid-logloss:0.59868\n",
      "[46]\ttrain-logloss:0.59836\tvalid-logloss:0.59863\n",
      "[47]\ttrain-logloss:0.59833\tvalid-logloss:0.59861\n",
      "[48]\ttrain-logloss:0.59830\tvalid-logloss:0.59858\n",
      "[49]\ttrain-logloss:0.59828\tvalid-logloss:0.59856\n",
      "[50]\ttrain-logloss:0.59825\tvalid-logloss:0.59853\n",
      "[51]\ttrain-logloss:0.59822\tvalid-logloss:0.59851\n",
      "[52]\ttrain-logloss:0.59820\tvalid-logloss:0.59849\n",
      "[53]\ttrain-logloss:0.59818\tvalid-logloss:0.59846\n",
      "[54]\ttrain-logloss:0.59815\tvalid-logloss:0.59844\n",
      "[55]\ttrain-logloss:0.59813\tvalid-logloss:0.59842\n",
      "[56]\ttrain-logloss:0.59812\tvalid-logloss:0.59841\n",
      "[57]\ttrain-logloss:0.59810\tvalid-logloss:0.59839\n",
      "[58]\ttrain-logloss:0.59808\tvalid-logloss:0.59838\n",
      "[59]\ttrain-logloss:0.59805\tvalid-logloss:0.59835\n",
      "[60]\ttrain-logloss:0.59803\tvalid-logloss:0.59834\n",
      "[61]\ttrain-logloss:0.59802\tvalid-logloss:0.59833\n",
      "[62]\ttrain-logloss:0.59801\tvalid-logloss:0.59832\n",
      "[63]\ttrain-logloss:0.59799\tvalid-logloss:0.59831\n",
      "[64]\ttrain-logloss:0.59798\tvalid-logloss:0.59830\n",
      "[65]\ttrain-logloss:0.59797\tvalid-logloss:0.59829\n",
      "[66]\ttrain-logloss:0.59797\tvalid-logloss:0.59829\n",
      "[67]\ttrain-logloss:0.59796\tvalid-logloss:0.59828\n",
      "[68]\ttrain-logloss:0.59794\tvalid-logloss:0.59827\n",
      "[69]\ttrain-logloss:0.59793\tvalid-logloss:0.59826\n",
      "[70]\ttrain-logloss:0.59792\tvalid-logloss:0.59825\n",
      "[71]\ttrain-logloss:0.59791\tvalid-logloss:0.59824\n",
      "[72]\ttrain-logloss:0.59789\tvalid-logloss:0.59823\n",
      "[73]\ttrain-logloss:0.59789\tvalid-logloss:0.59822\n",
      "[74]\ttrain-logloss:0.59788\tvalid-logloss:0.59822\n",
      "[75]\ttrain-logloss:0.59788\tvalid-logloss:0.59821\n",
      "[76]\ttrain-logloss:0.59787\tvalid-logloss:0.59821\n",
      "[77]\ttrain-logloss:0.59787\tvalid-logloss:0.59820\n",
      "[78]\ttrain-logloss:0.59785\tvalid-logloss:0.59819\n",
      "[79]\ttrain-logloss:0.59785\tvalid-logloss:0.59819\n",
      "[80]\ttrain-logloss:0.59784\tvalid-logloss:0.59818\n",
      "[81]\ttrain-logloss:0.59784\tvalid-logloss:0.59818\n",
      "[82]\ttrain-logloss:0.59783\tvalid-logloss:0.59818\n",
      "[83]\ttrain-logloss:0.59783\tvalid-logloss:0.59817\n",
      "[84]\ttrain-logloss:0.59781\tvalid-logloss:0.59816\n",
      "[85]\ttrain-logloss:0.59780\tvalid-logloss:0.59815\n",
      "[86]\ttrain-logloss:0.59780\tvalid-logloss:0.59815\n",
      "[87]\ttrain-logloss:0.59779\tvalid-logloss:0.59814\n",
      "[88]\ttrain-logloss:0.59779\tvalid-logloss:0.59814\n",
      "[89]\ttrain-logloss:0.59779\tvalid-logloss:0.59814\n",
      "[90]\ttrain-logloss:0.59778\tvalid-logloss:0.59814\n",
      "[91]\ttrain-logloss:0.59778\tvalid-logloss:0.59813\n",
      "[92]\ttrain-logloss:0.59777\tvalid-logloss:0.59813\n",
      "[93]\ttrain-logloss:0.59777\tvalid-logloss:0.59812\n",
      "[94]\ttrain-logloss:0.59775\tvalid-logloss:0.59811\n",
      "[95]\ttrain-logloss:0.59775\tvalid-logloss:0.59810\n",
      "[96]\ttrain-logloss:0.59775\tvalid-logloss:0.59810\n",
      "[97]\ttrain-logloss:0.59774\tvalid-logloss:0.59810\n",
      "[98]\ttrain-logloss:0.59774\tvalid-logloss:0.59810\n",
      "[99]\ttrain-logloss:0.59774\tvalid-logloss:0.59810\n",
      "[100]\ttrain-logloss:0.59774\tvalid-logloss:0.59810\n",
      "[101]\ttrain-logloss:0.59773\tvalid-logloss:0.59810\n",
      "[102]\ttrain-logloss:0.59772\tvalid-logloss:0.59808\n",
      "[103]\ttrain-logloss:0.59772\tvalid-logloss:0.59808\n",
      "[104]\ttrain-logloss:0.59772\tvalid-logloss:0.59808\n",
      "[105]\ttrain-logloss:0.59772\tvalid-logloss:0.59808\n",
      "[106]\ttrain-logloss:0.59771\tvalid-logloss:0.59808\n",
      "[107]\ttrain-logloss:0.59771\tvalid-logloss:0.59807\n",
      "[108]\ttrain-logloss:0.59770\tvalid-logloss:0.59807\n",
      "[109]\ttrain-logloss:0.59770\tvalid-logloss:0.59807\n",
      "[110]\ttrain-logloss:0.59770\tvalid-logloss:0.59807\n",
      "[111]\ttrain-logloss:0.59770\tvalid-logloss:0.59807\n",
      "[112]\ttrain-logloss:0.59770\tvalid-logloss:0.59807\n",
      "[113]\ttrain-logloss:0.59769\tvalid-logloss:0.59806\n",
      "[114]\ttrain-logloss:0.59769\tvalid-logloss:0.59806\n",
      "[115]\ttrain-logloss:0.59769\tvalid-logloss:0.59806\n",
      "[116]\ttrain-logloss:0.59768\tvalid-logloss:0.59806\n",
      "[117]\ttrain-logloss:0.59768\tvalid-logloss:0.59805\n",
      "[118]\ttrain-logloss:0.59768\tvalid-logloss:0.59805\n",
      "[119]\ttrain-logloss:0.59768\tvalid-logloss:0.59805\n"
     ]
    }
   ],
   "source": [
    "## First identify and put the variables within a list which should be dropped: \n",
    "\n",
    "vars_to_drop=['dayssincelastach','paymentsreturned7years','firstpaymentreturns7years','secondlastpaymentdisposition_RETURNED','currenttradelines','paymentsreturned1years',\n",
    "                          'paymentsreturned3years','achreturns3years']\n",
    "\n",
    "## Drop all these variables from train.val,test and oot:\n",
    "\n",
    "X_train_top=X_train.drop(vars_to_drop,axis=1)\n",
    "X_val_top=X_val.drop(vars_to_drop,axis=1)\n",
    "X_test_top=X_test.drop(vars_to_drop,axis=1)\n",
    "X_oot_top=X_oot.drop(vars_to_drop,axis=1)\n",
    "\n",
    "\n",
    "## Now, re run the model :\n",
    "\n",
    "## Setting up monotonic constraints : \n",
    "my_tuple_1 = (1)\n",
    "N=X_train_top.shape[1]\n",
    "mono_array = ((my_tuple_1,) * N)\n",
    "\n",
    "params = {\n",
    "            \"objective\":'binary:logistic',\n",
    "            \"n_jobs\":4,\n",
    "            'max_depth':3,\n",
    "            'booster': 'gbtree',\n",
    "            'alpha': 0,\n",
    "            \"lambda\":0,\n",
    "            'learning_rate': 0.1,\n",
    "            \"eval_metric\":\"logloss\",\n",
    "            \"nthread\":2,\n",
    "            \"min_child_weight\" :1,\n",
    "            \"monotone_constraints\":mono_array,\n",
    "            \"early_stopping_rounds\":5\n",
    "            \n",
    "        }  \n",
    "\n",
    "\n",
    "from xgboost import train, DMatrix\n",
    "trainDmatrix = DMatrix(X_train_top, label=y_train, weight=train_weights.values)\n",
    "validDmatrix = DMatrix(X_val_top, label=y_val, weight=val_weights.values)\n",
    "\n",
    "booster_model_top = train(params, trainDmatrix, num_boost_round=120, \n",
    "                evals=[(trainDmatrix,'train'), (validDmatrix, 'valid')], early_stopping_rounds=5, \n",
    "                verbose_eval=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "monetary-hartford",
   "metadata": {},
   "outputs": [],
   "source": [
    "# make predictions on train, test and OOT filtered data\n",
    "import xgboost as xgb\n",
    "\n",
    "# Convert dataset to special XGBoost optimised data structure\n",
    "dtrain_top = xgb.DMatrix(X_train_top, label=y_train,weight=train_weights.values)\n",
    "dval_top = xgb.DMatrix(X_val_top, label=y_val,weight=val_weights.values)\n",
    "dtest_top = xgb.DMatrix(X_test_top, label=y_test,weight=test_weights.values)\n",
    "doot_top = xgb.DMatrix(X_oot_top, label=y_oot,weight=oot_weights.values)\n",
    "\n",
    "y_pred_train_proba_top = booster_model_top.predict(dtrain_top)\n",
    "y_pred_val_proba_top = booster_model_top.predict(dval_top)\n",
    "y_pred_test_proba_top = booster_model_top.predict(dtest_top)\n",
    "y_pred_oot_proba_top = booster_model_top.predict(doot_top)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "arranged-console",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ks, gini in training set :\n",
      "(0.1732087625452901, 0.24124184642972124)\n",
      "\n",
      "\n",
      "ks, gini in validation set :\n",
      "(0.17082824166147648, 0.2389602374167894)\n",
      "\n",
      "\n",
      "ks, gini in testing set :\n",
      "(0.16983579029053575, 0.2376694626950988)\n",
      "\n",
      "\n",
      "ks, gini in oot set :\n",
      "(0.19546703285074285, 0.27229836507670124)\n"
     ]
    }
   ],
   "source": [
    "## Check for KS Gini :\n",
    "\n",
    "print(\"ks, gini in training set :\")\n",
    "print(ks_w2(y_train,y_pred_train_proba_top,train_weights.values))\n",
    "print(\"\\n\")\n",
    "print(\"ks, gini in validation set :\")\n",
    "print(ks_w2(y_val,y_pred_val_proba_top,val_weights.values))\n",
    "print(\"\\n\")\n",
    "print(\"ks, gini in testing set :\")\n",
    "print(ks_w2(y_test,y_pred_test_proba_top,test_weights.values))\n",
    "print(\"\\n\")\n",
    "print(\"ks, gini in oot set :\")\n",
    "print(ks_w2(y_oot,y_pred_oot_proba_top,oot_weights.values))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cooperative-patrick",
   "metadata": {},
   "source": [
    "## Section 10: comparing individual scores from EfX vs Indep replication in python:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "weekly-petite",
   "metadata": {},
   "source": [
    "### Bring in the scored data sets where we have the probabilities from the dev environment to MRM environment by running the below queries in BQ:\n",
    "\n",
    "create table `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.dev_probs_EfX` as select * from `dfa-dna-ws5089-us-prd-e68d.dfa_dna_ws5089_us_prd_sandbox.dx_only_dev_scr_final`\n",
    "\n",
    "create table `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.val_probs_EfX` as select * from `dfa-dna-ws5089-us-prd-e68d.dfa_dna_ws5089_us_prd_sandbox.dx_only_val_scr_final`\n",
    "\n",
    "create table `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.test_probs_EfX` as select * from `dfa-dna-ws5089-us-prd-e68d.dfa_dna_ws5089_us_prd_sandbox.dx_only_test_scr_final`\n",
    "\n",
    "create table `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.oot_probs_EfX` as select * from `dfa-dna-ws5089-us-prd-e68d.dfa_dna_ws5089_us_prd_sandbox.dx_only_oot_scr_final`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "settled-trigger",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.dev_probs_EfX;\n",
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.val_probs_EfX;\n",
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.test_probs_EfX;\n",
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.oot_probs_EfX;\n"
     ]
    }
   ],
   "source": [
    "    ## Read the EfX Scored data sets from BQ:\n",
    "    \n",
    "    \n",
    "from google.cloud import bigquery as bq\n",
    "\n",
    "    def convertToDF(tableName,project_name = 'dfa-dna-ws5155-us-prd-d151',database_name = 'dfa_dna_ws5155_us_prd_sandbox'):\n",
    "        bqTbl = bq.TableReference.from_string(f\"{project_name}.{database_name}.{tableName}\")\n",
    "\n",
    "\n",
    "        query_string=\"select * from \"+\"\"f\"{project_name}.{database_name}.{tableName}\"+\";\"\n",
    "\n",
    "        print(query_string)\n",
    "        client=bq.Client()\n",
    "        data=client.query(query_string)\n",
    "        data=data.result().to_dataframe()\n",
    "        return data\n",
    "\n",
    "EfX_dx_dev_score=convertToDF('dev_probs_EfX')\n",
    "EfX_dx_val_score=convertToDF('val_probs_EfX')\n",
    "EfX_dx_test_score=convertToDF('test_probs_EfX')\n",
    "EfX_dx_oot_score=convertToDF('oot_probs_EfX')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "heavy-least",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Comparative analysis on score distribution acress train , val and OOT datasets:\n",
    "\n",
    "df_summary_score_dev=pd.concat([y_train, 1-y_train,pd.Series(y_pred_train_proba)], axis=1)\n",
    "df_summary_score_dev.columns = ['good', 'bad','Prob_Score']\n",
    "\n",
    "df_summary_score_val=pd.concat([y_val, 1-y_val,pd.Series(y_pred_val_proba)], axis=1)\n",
    "df_summary_score_val.columns = ['good', 'bad','Prob_Score']\n",
    "\n",
    "df_summary_score_test=pd.concat([y_test, 1-y_test,pd.Series(y_pred_test_proba)], axis=1)\n",
    "df_summary_score_test.columns = ['good', 'bad','Prob_Score']\n",
    "\n",
    "df_summary_score_oot=pd.concat([y_oot, 1-y_oot,pd.Series(y_pred_oot_proba)], axis=1)\n",
    "df_summary_score_oot.columns = ['good', 'bad','Prob_Score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "behind-swedish",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prob_difference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1,854,688.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-0.2550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1%</th>\n",
       "      <td>-0.0148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10%</th>\n",
       "      <td>-0.0061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-0.0026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.0003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.0025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90%</th>\n",
       "      <td>0.0056</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95%</th>\n",
       "      <td>0.0078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99%</th>\n",
       "      <td>0.0128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.0422</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           prob_difference\n",
       "count       1,854,688.0000\n",
       "mean               -0.0000\n",
       "std                 0.0051\n",
       "min                -0.2550\n",
       "1%                 -0.0148\n",
       "10%                -0.0061\n",
       "25%                -0.0026\n",
       "50%                 0.0003\n",
       "75%                 0.0025\n",
       "90%                 0.0056\n",
       "95%                 0.0078\n",
       "99%                 0.0128\n",
       "max                 0.0422"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "pd.options.display.float_format = '{:20,.4f}'.format\n",
    "\n",
    "ads_seg6_dev_prob=pd.merge(ads_seg6_dx_dev_data_2[['unique_key']],df_summary_score_dev,left_index=True, right_index=True)\n",
    "ads_seg6_dev_prob_diff=ads_seg6_dev_prob[['unique_key','Prob_Score']].merge(EfX_dx_dev_score[['unique_key','probability']],left_on='unique_key',right_on='unique_key',how='left')\n",
    "ads_seg6_dev_prob_diff['prob_difference']=(ads_seg6_dev_prob_diff['probability']-ads_seg6_dev_prob_diff['Prob_Score'])\n",
    "\n",
    "pd.DataFrame(ads_seg6_dev_prob_diff['prob_difference'].describe([.01,.1,.25,.5,.75,.9,.95,.99]))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "virtual-enhancement",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAPE for development data: 0.005467\n"
     ]
    }
   ],
   "source": [
    "mape = ((ads_seg6_dev_prob_diff.probability-ads_seg6_dev_prob_diff.Prob_Score).abs() / ads_seg6_dev_prob_diff.probability).mean()\n",
    "\n",
    "print(\"MAPE for development data: %f\" %mape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "better-election",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prob_difference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1,112,939.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-0.1681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1%</th>\n",
       "      <td>-0.0148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10%</th>\n",
       "      <td>-0.0061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-0.0026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.0003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.0025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90%</th>\n",
       "      <td>0.0055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95%</th>\n",
       "      <td>0.0078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99%</th>\n",
       "      <td>0.0127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.0444</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           prob_difference\n",
       "count       1,112,939.0000\n",
       "mean               -0.0000\n",
       "std                 0.0050\n",
       "min                -0.1681\n",
       "1%                 -0.0148\n",
       "10%                -0.0061\n",
       "25%                -0.0026\n",
       "50%                 0.0003\n",
       "75%                 0.0025\n",
       "90%                 0.0055\n",
       "95%                 0.0078\n",
       "99%                 0.0127\n",
       "max                 0.0444"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "pd.options.display.float_format = '{:20,.4f}'.format\n",
    "\n",
    "ads_seg6_val_prob=pd.merge(ads_seg6_dx_val_data_2[['unique_key']],df_summary_score_val,left_index=True, right_index=True)\n",
    "ads_seg6_val_prob_diff=ads_seg6_val_prob[['unique_key','Prob_Score']].merge(EfX_dx_val_score[['unique_key','probability']],left_on='unique_key',right_on='unique_key',how='left')\n",
    "ads_seg6_val_prob_diff['prob_difference']=(ads_seg6_val_prob_diff['probability']-ads_seg6_val_prob_diff['Prob_Score'])\n",
    "\n",
    "pd.DataFrame(ads_seg6_val_prob_diff['prob_difference'].describe([.01,.1,.25,.5,.75,.9,.95,.99]))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "interested-pearl",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAPE for validation data: 0.005465\n"
     ]
    }
   ],
   "source": [
    "mape = ((ads_seg6_val_prob_diff.probability-ads_seg6_val_prob_diff.Prob_Score).abs() / ads_seg6_val_prob_diff.probability).mean()\n",
    "\n",
    "print(\"MAPE for validation data: %f\" %mape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "nutritional-street",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prob_difference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>741,265.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-0.2330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1%</th>\n",
       "      <td>-0.0149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10%</th>\n",
       "      <td>-0.0061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-0.0026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.0003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.0025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90%</th>\n",
       "      <td>0.0055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95%</th>\n",
       "      <td>0.0078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99%</th>\n",
       "      <td>0.0128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.0407</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           prob_difference\n",
       "count         741,265.0000\n",
       "mean               -0.0000\n",
       "std                 0.0051\n",
       "min                -0.2330\n",
       "1%                 -0.0149\n",
       "10%                -0.0061\n",
       "25%                -0.0026\n",
       "50%                 0.0003\n",
       "75%                 0.0025\n",
       "90%                 0.0055\n",
       "95%                 0.0078\n",
       "99%                 0.0128\n",
       "max                 0.0407"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "pd.options.display.float_format = '{:20,.4f}'.format\n",
    "\n",
    "ads_seg6_test_prob=pd.merge(ads_seg6_dx_test_data_2[['unique_key']],df_summary_score_test,left_index=True, right_index=True)\n",
    "ads_seg6_test_prob_diff=ads_seg6_test_prob[['unique_key','Prob_Score']].merge(EfX_dx_test_score[['unique_key','probability']],left_on='unique_key',right_on='unique_key',how='left')\n",
    "ads_seg6_test_prob_diff['prob_difference']=(ads_seg6_test_prob_diff['probability']-ads_seg6_test_prob_diff['Prob_Score'])\n",
    "\n",
    "pd.DataFrame(ads_seg6_test_prob_diff['prob_difference'].describe([.01,.1,.25,.5,.75,.9,.95,.99]))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "inappropriate-maintenance",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAPE for test data: 0.005482\n"
     ]
    }
   ],
   "source": [
    "\n",
    "mape = ((ads_seg6_test_prob_diff.probability-ads_seg6_test_prob_diff.Prob_Score).abs() / ads_seg6_test_prob_diff.probability).mean()\n",
    "\n",
    "print(\"MAPE for test data: %f\" %mape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "unavailable-measurement",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "tender-stamp",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prob_difference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4,429,865.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-0.0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-0.2707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1%</th>\n",
       "      <td>-0.0159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10%</th>\n",
       "      <td>-0.0065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-0.0027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.0003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.0031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90%</th>\n",
       "      <td>0.0057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95%</th>\n",
       "      <td>0.0079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99%</th>\n",
       "      <td>0.0130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.0405</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           prob_difference\n",
       "count       4,429,865.0000\n",
       "mean               -0.0001\n",
       "std                 0.0053\n",
       "min                -0.2707\n",
       "1%                 -0.0159\n",
       "10%                -0.0065\n",
       "25%                -0.0027\n",
       "50%                 0.0003\n",
       "75%                 0.0031\n",
       "90%                 0.0057\n",
       "95%                 0.0079\n",
       "99%                 0.0130\n",
       "max                 0.0405"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "pd.options.display.float_format = '{:20,.4f}'.format\n",
    "\n",
    "ads_seg6_oot_prob=pd.merge(ads_seg6_dx_oot_data_2[['unique_key']],df_summary_score_oot,left_index=True, right_index=True)\n",
    "ads_seg6_oot_prob_diff=ads_seg6_oot_prob[['unique_key','Prob_Score']].merge(EfX_dx_oot_score[['unique_key','probability']],left_on='unique_key',right_on='unique_key',how='left')\n",
    "ads_seg6_oot_prob_diff['prob_difference']=(ads_seg6_oot_prob_diff['probability']-ads_seg6_oot_prob_diff['Prob_Score'])\n",
    "\n",
    "pd.DataFrame(ads_seg6_oot_prob_diff['prob_difference'].describe([.01,.1,.25,.5,.75,.9,.95,.99]))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "approved-florist",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAPE for oot data: 0.005839\n"
     ]
    }
   ],
   "source": [
    "mape = ((ads_seg6_oot_prob_diff.probability-ads_seg6_oot_prob_diff.Prob_Score).abs() / ads_seg6_oot_prob_diff.probability).mean()\n",
    "\n",
    "print(\"MAPE for oot data: %f\" %mape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "extended-timber",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "selective-tracker",
   "metadata": {},
   "source": [
    "## Section 11: Missing value analysis :"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "infectious-capitol",
   "metadata": {},
   "source": [
    "- We need to run the below queries first using combine_dev_final_2 in BQ in order to save the raw data without transformations within GCP environment.\n",
    "\n",
    "\n",
    "- create table `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.ads_seg6_train_wo_transf` as \n",
    "select unique_key,archive_attr,flag_dx_combo,flag_train,PERF_ALL_IND_P12M_Bad_Flag,dx_consumerid,dx_TotalTradelines,dx_ApplicationInquiries7Years,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,weights_model_dx from `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_2` \n",
    "WHERE flag_dx_combo=1 AND flag_train=1 AND PERF_ALL_IND_P12M_Bad_Flag in (0,1) AND dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 \n",
    "OR dx_ApplicationInquiries7Years >=1);\n",
    "\n",
    "- create table `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.ads_seg6_val_wo_transf` as \n",
    "select unique_key,archive_attr,flag_dx_combo,flag_train,PERF_ALL_IND_P12M_Bad_Flag,dx_consumerid,dx_TotalTradelines,dx_ApplicationInquiries7Years,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,weights_model_dx from `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_2` \n",
    "WHERE flag_dx_combo=1 AND flag_val=1 AND PERF_ALL_IND_P12M_Bad_Flag in (0,1) AND dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 \n",
    "OR dx_ApplicationInquiries7Years >=1);\n",
    "\n",
    "- create table `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.ads_seg6_test_wo_transf` as \n",
    "select unique_key,archive_attr,flag_dx_combo,flag_train,PERF_ALL_IND_P12M_Bad_Flag,dx_consumerid,dx_TotalTradelines,dx_ApplicationInquiries7Years,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,weights_model_dx from `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_2` \n",
    "WHERE flag_dx_combo=1 AND flag_test=1 AND PERF_ALL_IND_P12M_Bad_Flag in (0,1) AND dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 \n",
    "OR dx_ApplicationInquiries7Years >=1);\n",
    "\n",
    "\n",
    "\n",
    "- create table `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.ads_seg6_oot_wo_transf` as \n",
    "select unique_key,archive_attr,flag_dx_combo,flag_train,PERF_ALL_IND_P12M_Bad_Flag,dx_consumerid,dx_TotalTradelines,dx_ApplicationInquiries7Years,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,weights_model_dx from `dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_2` \n",
    "WHERE flag_dx_combo=1 AND PERF_ALL_IND_P12M_Bad_Flag in (0,1) AND dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 \n",
    " OR dx_ApplicationInquiries7Years >=1)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "metallic-drinking",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.ads_seg6_train_wo_transf;\n"
     ]
    }
   ],
   "source": [
    "#Read the combine_dev_final_2 data fornthe selected attributes and explore the EDA : \n",
    "    \n",
    "    \n",
    "from google.cloud import bigquery as bq\n",
    "\n",
    "def convertToDF(tableName,project_name = 'dfa-dna-ws5155-us-prd-d151',database_name = 'dfa_dna_ws5155_us_prd_sandbox'):\n",
    "    bqTbl = bq.TableReference.from_string(f\"{project_name}.{database_name}.{tableName}\")\n",
    "\n",
    "\n",
    "    query_string=\"select * from \"+\"\"f\"{project_name}.{database_name}.{tableName}\"+\";\"\n",
    "\n",
    "    print(query_string)\n",
    "    client=bq.Client()\n",
    "    data=client.query(query_string)\n",
    "    data=data.result().to_dataframe()\n",
    "    return data\n",
    "\n",
    "ads_seg6_train_wo_transf=convertToDF('ads_seg6_train_wo_transf')\n",
    "\n",
    "# \"WHERE flag_dx_combo=1 AND flag_train=1 AND PERF_ALL_IND_P12M_Bad_Flag in (0,1) AND dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 OR dx_ApplicationInquiries7Years >=1)\"\n",
    "# \"select unique_key,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,good,bad from \"+\"\"f\"{project_name}.{database_name}.{tableName}\"+\";\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "sized-merit",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_key</th>\n",
       "      <th>archive_attr</th>\n",
       "      <th>flag_dx_combo</th>\n",
       "      <th>flag_train</th>\n",
       "      <th>PERF_ALL_IND_P12M_Bad_Flag</th>\n",
       "      <th>dx_consumerid</th>\n",
       "      <th>dx_TotalTradelines</th>\n",
       "      <th>dx_ApplicationInquiries7Years</th>\n",
       "      <th>dayssincelastinquiry</th>\n",
       "      <th>vendorinquiries1years</th>\n",
       "      <th>...</th>\n",
       "      <th>paymentsreturned1years</th>\n",
       "      <th>nsfreturns120days</th>\n",
       "      <th>applicationinquiries60days</th>\n",
       "      <th>chargeoffs7years</th>\n",
       "      <th>totalpaidoffs</th>\n",
       "      <th>firstpaymentreturns7years</th>\n",
       "      <th>dayssincelastach</th>\n",
       "      <th>currenttradelines</th>\n",
       "      <th>secondlastpaymentdisposition_RETURNED</th>\n",
       "      <th>weights_model_dx</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-08-01-252900129-02A4900CAC902E4701-0D585C...</td>\n",
       "      <td>2017-07-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15200491</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1,528.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.9048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-10-01-465988612-02A492934496C40203-30107A...</td>\n",
       "      <td>2017-09-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>20375159</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1,117.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.9048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-01-01-100609978-01AA02FFA9B0085301-33270B...</td>\n",
       "      <td>2017-12-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20040433</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1,265.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.9048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-05-01-343666326-02A87E4B01EFA83703-1DD420...</td>\n",
       "      <td>2017-04-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14946481</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1,300.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.9048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-04-01-622033553-02B02F65AA4D887385-061626...</td>\n",
       "      <td>2017-03-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12165999</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1,197.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.9308</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          unique_key archive_attr  \\\n",
       "0  2017-08-01-252900129-02A4900CAC902E4701-0D585C...   2017-07-01   \n",
       "1  2017-10-01-465988612-02A492934496C40203-30107A...   2017-09-01   \n",
       "2  2018-01-01-100609978-01AA02FFA9B0085301-33270B...   2017-12-01   \n",
       "3  2017-05-01-343666326-02A87E4B01EFA83703-1DD420...   2017-04-01   \n",
       "4  2017-04-01-622033553-02B02F65AA4D887385-061626...   2017-03-01   \n",
       "\n",
       "   flag_dx_combo  flag_train  PERF_ALL_IND_P12M_Bad_Flag dx_consumerid  \\\n",
       "0              1           1                           0      15200491   \n",
       "1              1           1                           0      20375159   \n",
       "2              1           1                           1      20040433   \n",
       "3              1           1                           0      14946481   \n",
       "4              1           1                           0      12165999   \n",
       "\n",
       "   dx_TotalTradelines  dx_ApplicationInquiries7Years  dayssincelastinquiry  \\\n",
       "0                   0                              1            1,528.0000   \n",
       "1                   0                              1            1,117.0000   \n",
       "2                   0                              1            1,265.0000   \n",
       "3                   0                              1            1,300.0000   \n",
       "4                   0                              1            1,197.0000   \n",
       "\n",
       "   vendorinquiries1years  ...  paymentsreturned1years  nsfreturns120days  \\\n",
       "0                      0  ...                       0                  0   \n",
       "1                      0  ...                       0                  0   \n",
       "2                      0  ...                       0                  0   \n",
       "3                      0  ...                       0                  0   \n",
       "4                      0  ...                       0                  0   \n",
       "\n",
       "   applicationinquiries60days  chargeoffs7years  totalpaidoffs  \\\n",
       "0                           0                 0              0   \n",
       "1                           0                 0              0   \n",
       "2                           0                 0              0   \n",
       "3                           0                 0              0   \n",
       "4                           0                 0              0   \n",
       "\n",
       "   firstpaymentreturns7years  dayssincelastach  currenttradelines  \\\n",
       "0                          0               NaN                  0   \n",
       "1                          0               NaN                  0   \n",
       "2                          0               NaN                  0   \n",
       "3                          0               NaN                  0   \n",
       "4                          0               NaN                  0   \n",
       "\n",
       "   secondlastpaymentdisposition_RETURNED     weights_model_dx  \n",
       "0                                      0               0.9048  \n",
       "1                                      0               0.9048  \n",
       "2                                      0               0.9048  \n",
       "3                                      0               0.9048  \n",
       "4                                      0               0.9308  \n",
       "\n",
       "[5 rows x 40 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ads_seg6_train_wo_transf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "listed-bread",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_name</th>\n",
       "      <th>percent_missing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>dayssincelastreturn</th>\n",
       "      <td>dayssincelastreturn</td>\n",
       "      <td>73.3884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelastach</th>\n",
       "      <td>dayssincelastach</td>\n",
       "      <td>56.8549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelasttradeline</th>\n",
       "      <td>dayssincelasttradeline</td>\n",
       "      <td>48.3363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelastinquiry</th>\n",
       "      <td>dayssincelastinquiry</td>\n",
       "      <td>12.4119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique_key</th>\n",
       "      <td>unique_key</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentsreturned3years</th>\n",
       "      <td>paymentsreturned3years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nsfreturns5years</th>\n",
       "      <td>nsfreturns5years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>achreturns3years</th>\n",
       "      <td>achreturns3years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thirdlastpaymentdisposition_COMPLETE</th>\n",
       "      <td>thirdlastpaymentdisposition_COMPLETE</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lastpaymentdisposition_RETURNED</th>\n",
       "      <td>lastpaymentdisposition_RETURNED</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>secondlastpaymentdisposition_COMPLETE</th>\n",
       "      <td>secondlastpaymentdisposition_COMPLETE</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nsfreturns120days</th>\n",
       "      <td>nsfreturns120days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentsreturned1years</th>\n",
       "      <td>paymentsreturned1years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maximumtotalprincipal</th>\n",
       "      <td>maximumtotalprincipal</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>applicationinquiries60days</th>\n",
       "      <td>applicationinquiries60days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chargeoffs7years</th>\n",
       "      <td>chargeoffs7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>totalpaidoffs</th>\n",
       "      <td>totalpaidoffs</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>firstpaymentreturns7years</th>\n",
       "      <td>firstpaymentreturns7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>currenttradelines</th>\n",
       "      <td>currenttradelines</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>secondlastpaymentdisposition_RETURNED</th>\n",
       "      <td>secondlastpaymentdisposition_RETURNED</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentsreturned7years</th>\n",
       "      <td>paymentsreturned7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maximumtradelineprincipal</th>\n",
       "      <td>maximumtradelineprincipal</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>achreturns1years</th>\n",
       "      <td>achreturns1years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>archive_attr</th>\n",
       "      <td>archive_attr</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flag_dx_combo</th>\n",
       "      <td>flag_dx_combo</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flag_train</th>\n",
       "      <td>flag_train</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PERF_ALL_IND_P12M_Bad_Flag</th>\n",
       "      <td>PERF_ALL_IND_P12M_Bad_Flag</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dx_consumerid</th>\n",
       "      <td>dx_consumerid</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dx_TotalTradelines</th>\n",
       "      <td>dx_TotalTradelines</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dx_ApplicationInquiries7Years</th>\n",
       "      <td>dx_ApplicationInquiries7Years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vendorinquiries1years</th>\n",
       "      <td>vendorinquiries1years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uniquememberinquiries2years</th>\n",
       "      <td>uniquememberinquiries2years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maximumtradelineprincipalpaidoff</th>\n",
       "      <td>maximumtradelineprincipalpaidoff</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>applicationinquiries3years</th>\n",
       "      <td>applicationinquiries3years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vendorinquiries180days</th>\n",
       "      <td>vendorinquiries180days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dailyinquiries120days</th>\n",
       "      <td>dailyinquiries120days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uniquememberinquiries7years</th>\n",
       "      <td>uniquememberinquiries7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lastpaymentdisposition_COMPLETE</th>\n",
       "      <td>lastpaymentdisposition_COMPLETE</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentscompleted7years</th>\n",
       "      <td>paymentscompleted7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weights_model_dx</th>\n",
       "      <td>weights_model_dx</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                 column_name  \\\n",
       "dayssincelastreturn                                      dayssincelastreturn   \n",
       "dayssincelastach                                            dayssincelastach   \n",
       "dayssincelasttradeline                                dayssincelasttradeline   \n",
       "dayssincelastinquiry                                    dayssincelastinquiry   \n",
       "unique_key                                                        unique_key   \n",
       "paymentsreturned3years                                paymentsreturned3years   \n",
       "nsfreturns5years                                            nsfreturns5years   \n",
       "achreturns3years                                            achreturns3years   \n",
       "thirdlastpaymentdisposition_COMPLETE    thirdlastpaymentdisposition_COMPLETE   \n",
       "lastpaymentdisposition_RETURNED              lastpaymentdisposition_RETURNED   \n",
       "secondlastpaymentdisposition_COMPLETE  secondlastpaymentdisposition_COMPLETE   \n",
       "nsfreturns120days                                          nsfreturns120days   \n",
       "paymentsreturned1years                                paymentsreturned1years   \n",
       "maximumtotalprincipal                                  maximumtotalprincipal   \n",
       "applicationinquiries60days                        applicationinquiries60days   \n",
       "chargeoffs7years                                            chargeoffs7years   \n",
       "totalpaidoffs                                                  totalpaidoffs   \n",
       "firstpaymentreturns7years                          firstpaymentreturns7years   \n",
       "currenttradelines                                          currenttradelines   \n",
       "secondlastpaymentdisposition_RETURNED  secondlastpaymentdisposition_RETURNED   \n",
       "paymentsreturned7years                                paymentsreturned7years   \n",
       "maximumtradelineprincipal                          maximumtradelineprincipal   \n",
       "achreturns1years                                            achreturns1years   \n",
       "archive_attr                                                    archive_attr   \n",
       "flag_dx_combo                                                  flag_dx_combo   \n",
       "flag_train                                                        flag_train   \n",
       "PERF_ALL_IND_P12M_Bad_Flag                        PERF_ALL_IND_P12M_Bad_Flag   \n",
       "dx_consumerid                                                  dx_consumerid   \n",
       "dx_TotalTradelines                                        dx_TotalTradelines   \n",
       "dx_ApplicationInquiries7Years                  dx_ApplicationInquiries7Years   \n",
       "vendorinquiries1years                                  vendorinquiries1years   \n",
       "uniquememberinquiries2years                      uniquememberinquiries2years   \n",
       "maximumtradelineprincipalpaidoff            maximumtradelineprincipalpaidoff   \n",
       "applicationinquiries3years                        applicationinquiries3years   \n",
       "vendorinquiries180days                                vendorinquiries180days   \n",
       "dailyinquiries120days                                  dailyinquiries120days   \n",
       "uniquememberinquiries7years                      uniquememberinquiries7years   \n",
       "lastpaymentdisposition_COMPLETE              lastpaymentdisposition_COMPLETE   \n",
       "paymentscompleted7years                              paymentscompleted7years   \n",
       "weights_model_dx                                            weights_model_dx   \n",
       "\n",
       "                                           percent_missing  \n",
       "dayssincelastreturn                                73.3884  \n",
       "dayssincelastach                                   56.8549  \n",
       "dayssincelasttradeline                             48.3363  \n",
       "dayssincelastinquiry                               12.4119  \n",
       "unique_key                                          0.0000  \n",
       "paymentsreturned3years                              0.0000  \n",
       "nsfreturns5years                                    0.0000  \n",
       "achreturns3years                                    0.0000  \n",
       "thirdlastpaymentdisposition_COMPLETE                0.0000  \n",
       "lastpaymentdisposition_RETURNED                     0.0000  \n",
       "secondlastpaymentdisposition_COMPLETE               0.0000  \n",
       "nsfreturns120days                                   0.0000  \n",
       "paymentsreturned1years                              0.0000  \n",
       "maximumtotalprincipal                               0.0000  \n",
       "applicationinquiries60days                          0.0000  \n",
       "chargeoffs7years                                    0.0000  \n",
       "totalpaidoffs                                       0.0000  \n",
       "firstpaymentreturns7years                           0.0000  \n",
       "currenttradelines                                   0.0000  \n",
       "secondlastpaymentdisposition_RETURNED               0.0000  \n",
       "paymentsreturned7years                              0.0000  \n",
       "maximumtradelineprincipal                           0.0000  \n",
       "achreturns1years                                    0.0000  \n",
       "archive_attr                                        0.0000  \n",
       "flag_dx_combo                                       0.0000  \n",
       "flag_train                                          0.0000  \n",
       "PERF_ALL_IND_P12M_Bad_Flag                          0.0000  \n",
       "dx_consumerid                                       0.0000  \n",
       "dx_TotalTradelines                                  0.0000  \n",
       "dx_ApplicationInquiries7Years                       0.0000  \n",
       "vendorinquiries1years                               0.0000  \n",
       "uniquememberinquiries2years                         0.0000  \n",
       "maximumtradelineprincipalpaidoff                    0.0000  \n",
       "applicationinquiries3years                          0.0000  \n",
       "vendorinquiries180days                              0.0000  \n",
       "dailyinquiries120days                               0.0000  \n",
       "uniquememberinquiries7years                         0.0000  \n",
       "lastpaymentdisposition_COMPLETE                     0.0000  \n",
       "paymentscompleted7years                             0.0000  \n",
       "weights_model_dx                                    0.0000  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "percent_missing = ads_seg6_train_wo_transf.isnull().sum() * 100 / len(ads_seg6_train_wo_transf)\n",
    "missing_value_df = pd.DataFrame({'column_name': ads_seg6_train_wo_transf.columns,\n",
    "                                 'percent_missing': percent_missing})\n",
    "missing_value_df.sort_values('percent_missing', inplace=True,ascending=False)\n",
    "missing_value_df\n",
    "# missing_value_df.to_csv(\"C:\\\\Users\\\\kxg264\\\\Desktop\\\\AE_Outputs\\\\missing_value_dev_data_ae.csv\")\n",
    "\n",
    "# path = 'C:\\\\Users\\\\kxg264\\\\Desktop\\\\AE_Outputs\\\\missing_dev_ae.csv'\n",
    "\n",
    "# missing_value_df.to_csv(path, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "creative-collar",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.ads_seg6_val_wo_transf;\n"
     ]
    }
   ],
   "source": [
    "#Read the combine_dev_final_2 data fornthe selected attributes and explore the EDA : \n",
    "    \n",
    "    \n",
    "from google.cloud import bigquery as bq\n",
    "\n",
    "def convertToDF(tableName,project_name = 'dfa-dna-ws5155-us-prd-d151',database_name = 'dfa_dna_ws5155_us_prd_sandbox'):\n",
    "    bqTbl = bq.TableReference.from_string(f\"{project_name}.{database_name}.{tableName}\")\n",
    "\n",
    "\n",
    "    query_string=\"select * from \"+\"\"f\"{project_name}.{database_name}.{tableName}\"+\";\"\n",
    "\n",
    "    print(query_string)\n",
    "    client=bq.Client()\n",
    "    data=client.query(query_string)\n",
    "    data=data.result().to_dataframe()\n",
    "    return data\n",
    "\n",
    "ads_seg6_val_wo_transf=convertToDF('ads_seg6_val_wo_transf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "instrumental-capitol",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_name</th>\n",
       "      <th>percent_missing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>dayssincelastreturn</th>\n",
       "      <td>dayssincelastreturn</td>\n",
       "      <td>73.3038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelastach</th>\n",
       "      <td>dayssincelastach</td>\n",
       "      <td>56.8797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelasttradeline</th>\n",
       "      <td>dayssincelasttradeline</td>\n",
       "      <td>48.3788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelastinquiry</th>\n",
       "      <td>dayssincelastinquiry</td>\n",
       "      <td>12.4145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique_key</th>\n",
       "      <td>unique_key</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentsreturned3years</th>\n",
       "      <td>paymentsreturned3years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nsfreturns5years</th>\n",
       "      <td>nsfreturns5years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>achreturns3years</th>\n",
       "      <td>achreturns3years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thirdlastpaymentdisposition_COMPLETE</th>\n",
       "      <td>thirdlastpaymentdisposition_COMPLETE</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lastpaymentdisposition_RETURNED</th>\n",
       "      <td>lastpaymentdisposition_RETURNED</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>secondlastpaymentdisposition_COMPLETE</th>\n",
       "      <td>secondlastpaymentdisposition_COMPLETE</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nsfreturns120days</th>\n",
       "      <td>nsfreturns120days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentsreturned1years</th>\n",
       "      <td>paymentsreturned1years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maximumtotalprincipal</th>\n",
       "      <td>maximumtotalprincipal</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>applicationinquiries60days</th>\n",
       "      <td>applicationinquiries60days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chargeoffs7years</th>\n",
       "      <td>chargeoffs7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>totalpaidoffs</th>\n",
       "      <td>totalpaidoffs</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>firstpaymentreturns7years</th>\n",
       "      <td>firstpaymentreturns7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>currenttradelines</th>\n",
       "      <td>currenttradelines</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>secondlastpaymentdisposition_RETURNED</th>\n",
       "      <td>secondlastpaymentdisposition_RETURNED</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentsreturned7years</th>\n",
       "      <td>paymentsreturned7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maximumtradelineprincipal</th>\n",
       "      <td>maximumtradelineprincipal</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>achreturns1years</th>\n",
       "      <td>achreturns1years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>archive_attr</th>\n",
       "      <td>archive_attr</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flag_dx_combo</th>\n",
       "      <td>flag_dx_combo</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flag_train</th>\n",
       "      <td>flag_train</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PERF_ALL_IND_P12M_Bad_Flag</th>\n",
       "      <td>PERF_ALL_IND_P12M_Bad_Flag</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dx_consumerid</th>\n",
       "      <td>dx_consumerid</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dx_TotalTradelines</th>\n",
       "      <td>dx_TotalTradelines</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dx_ApplicationInquiries7Years</th>\n",
       "      <td>dx_ApplicationInquiries7Years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vendorinquiries1years</th>\n",
       "      <td>vendorinquiries1years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uniquememberinquiries2years</th>\n",
       "      <td>uniquememberinquiries2years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maximumtradelineprincipalpaidoff</th>\n",
       "      <td>maximumtradelineprincipalpaidoff</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>applicationinquiries3years</th>\n",
       "      <td>applicationinquiries3years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vendorinquiries180days</th>\n",
       "      <td>vendorinquiries180days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dailyinquiries120days</th>\n",
       "      <td>dailyinquiries120days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uniquememberinquiries7years</th>\n",
       "      <td>uniquememberinquiries7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lastpaymentdisposition_COMPLETE</th>\n",
       "      <td>lastpaymentdisposition_COMPLETE</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentscompleted7years</th>\n",
       "      <td>paymentscompleted7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weights_model_dx</th>\n",
       "      <td>weights_model_dx</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                 column_name  \\\n",
       "dayssincelastreturn                                      dayssincelastreturn   \n",
       "dayssincelastach                                            dayssincelastach   \n",
       "dayssincelasttradeline                                dayssincelasttradeline   \n",
       "dayssincelastinquiry                                    dayssincelastinquiry   \n",
       "unique_key                                                        unique_key   \n",
       "paymentsreturned3years                                paymentsreturned3years   \n",
       "nsfreturns5years                                            nsfreturns5years   \n",
       "achreturns3years                                            achreturns3years   \n",
       "thirdlastpaymentdisposition_COMPLETE    thirdlastpaymentdisposition_COMPLETE   \n",
       "lastpaymentdisposition_RETURNED              lastpaymentdisposition_RETURNED   \n",
       "secondlastpaymentdisposition_COMPLETE  secondlastpaymentdisposition_COMPLETE   \n",
       "nsfreturns120days                                          nsfreturns120days   \n",
       "paymentsreturned1years                                paymentsreturned1years   \n",
       "maximumtotalprincipal                                  maximumtotalprincipal   \n",
       "applicationinquiries60days                        applicationinquiries60days   \n",
       "chargeoffs7years                                            chargeoffs7years   \n",
       "totalpaidoffs                                                  totalpaidoffs   \n",
       "firstpaymentreturns7years                          firstpaymentreturns7years   \n",
       "currenttradelines                                          currenttradelines   \n",
       "secondlastpaymentdisposition_RETURNED  secondlastpaymentdisposition_RETURNED   \n",
       "paymentsreturned7years                                paymentsreturned7years   \n",
       "maximumtradelineprincipal                          maximumtradelineprincipal   \n",
       "achreturns1years                                            achreturns1years   \n",
       "archive_attr                                                    archive_attr   \n",
       "flag_dx_combo                                                  flag_dx_combo   \n",
       "flag_train                                                        flag_train   \n",
       "PERF_ALL_IND_P12M_Bad_Flag                        PERF_ALL_IND_P12M_Bad_Flag   \n",
       "dx_consumerid                                                  dx_consumerid   \n",
       "dx_TotalTradelines                                        dx_TotalTradelines   \n",
       "dx_ApplicationInquiries7Years                  dx_ApplicationInquiries7Years   \n",
       "vendorinquiries1years                                  vendorinquiries1years   \n",
       "uniquememberinquiries2years                      uniquememberinquiries2years   \n",
       "maximumtradelineprincipalpaidoff            maximumtradelineprincipalpaidoff   \n",
       "applicationinquiries3years                        applicationinquiries3years   \n",
       "vendorinquiries180days                                vendorinquiries180days   \n",
       "dailyinquiries120days                                  dailyinquiries120days   \n",
       "uniquememberinquiries7years                      uniquememberinquiries7years   \n",
       "lastpaymentdisposition_COMPLETE              lastpaymentdisposition_COMPLETE   \n",
       "paymentscompleted7years                              paymentscompleted7years   \n",
       "weights_model_dx                                            weights_model_dx   \n",
       "\n",
       "                                           percent_missing  \n",
       "dayssincelastreturn                                73.3038  \n",
       "dayssincelastach                                   56.8797  \n",
       "dayssincelasttradeline                             48.3788  \n",
       "dayssincelastinquiry                               12.4145  \n",
       "unique_key                                          0.0000  \n",
       "paymentsreturned3years                              0.0000  \n",
       "nsfreturns5years                                    0.0000  \n",
       "achreturns3years                                    0.0000  \n",
       "thirdlastpaymentdisposition_COMPLETE                0.0000  \n",
       "lastpaymentdisposition_RETURNED                     0.0000  \n",
       "secondlastpaymentdisposition_COMPLETE               0.0000  \n",
       "nsfreturns120days                                   0.0000  \n",
       "paymentsreturned1years                              0.0000  \n",
       "maximumtotalprincipal                               0.0000  \n",
       "applicationinquiries60days                          0.0000  \n",
       "chargeoffs7years                                    0.0000  \n",
       "totalpaidoffs                                       0.0000  \n",
       "firstpaymentreturns7years                           0.0000  \n",
       "currenttradelines                                   0.0000  \n",
       "secondlastpaymentdisposition_RETURNED               0.0000  \n",
       "paymentsreturned7years                              0.0000  \n",
       "maximumtradelineprincipal                           0.0000  \n",
       "achreturns1years                                    0.0000  \n",
       "archive_attr                                        0.0000  \n",
       "flag_dx_combo                                       0.0000  \n",
       "flag_train                                          0.0000  \n",
       "PERF_ALL_IND_P12M_Bad_Flag                          0.0000  \n",
       "dx_consumerid                                       0.0000  \n",
       "dx_TotalTradelines                                  0.0000  \n",
       "dx_ApplicationInquiries7Years                       0.0000  \n",
       "vendorinquiries1years                               0.0000  \n",
       "uniquememberinquiries2years                         0.0000  \n",
       "maximumtradelineprincipalpaidoff                    0.0000  \n",
       "applicationinquiries3years                          0.0000  \n",
       "vendorinquiries180days                              0.0000  \n",
       "dailyinquiries120days                               0.0000  \n",
       "uniquememberinquiries7years                         0.0000  \n",
       "lastpaymentdisposition_COMPLETE                     0.0000  \n",
       "paymentscompleted7years                             0.0000  \n",
       "weights_model_dx                                    0.0000  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "percent_missing = ads_seg6_val_wo_transf.isnull().sum() * 100 / len(ads_seg6_val_wo_transf)\n",
    "missing_value_df = pd.DataFrame({'column_name': ads_seg6_train_wo_transf.columns,\n",
    "                                 'percent_missing': percent_missing})\n",
    "missing_value_df.sort_values('percent_missing', inplace=True,ascending=False)\n",
    "missing_value_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "recovered-wales",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.ads_seg6_test_wo_transf;\n"
     ]
    }
   ],
   "source": [
    "ads_seg6_test_wo_transf=convertToDF('ads_seg6_test_wo_transf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "embedded-saudi",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_name</th>\n",
       "      <th>percent_missing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>dayssincelastreturn</th>\n",
       "      <td>dayssincelastreturn</td>\n",
       "      <td>73.2809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelastach</th>\n",
       "      <td>dayssincelastach</td>\n",
       "      <td>56.8316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelasttradeline</th>\n",
       "      <td>dayssincelasttradeline</td>\n",
       "      <td>48.3565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelastinquiry</th>\n",
       "      <td>dayssincelastinquiry</td>\n",
       "      <td>12.3989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique_key</th>\n",
       "      <td>unique_key</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentsreturned3years</th>\n",
       "      <td>paymentsreturned3years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nsfreturns5years</th>\n",
       "      <td>nsfreturns5years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>achreturns3years</th>\n",
       "      <td>achreturns3years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thirdlastpaymentdisposition_COMPLETE</th>\n",
       "      <td>thirdlastpaymentdisposition_COMPLETE</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lastpaymentdisposition_RETURNED</th>\n",
       "      <td>lastpaymentdisposition_RETURNED</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>secondlastpaymentdisposition_COMPLETE</th>\n",
       "      <td>secondlastpaymentdisposition_COMPLETE</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nsfreturns120days</th>\n",
       "      <td>nsfreturns120days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentsreturned1years</th>\n",
       "      <td>paymentsreturned1years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maximumtotalprincipal</th>\n",
       "      <td>maximumtotalprincipal</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>applicationinquiries60days</th>\n",
       "      <td>applicationinquiries60days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chargeoffs7years</th>\n",
       "      <td>chargeoffs7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>totalpaidoffs</th>\n",
       "      <td>totalpaidoffs</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>firstpaymentreturns7years</th>\n",
       "      <td>firstpaymentreturns7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>currenttradelines</th>\n",
       "      <td>currenttradelines</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>secondlastpaymentdisposition_RETURNED</th>\n",
       "      <td>secondlastpaymentdisposition_RETURNED</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentsreturned7years</th>\n",
       "      <td>paymentsreturned7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maximumtradelineprincipal</th>\n",
       "      <td>maximumtradelineprincipal</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>achreturns1years</th>\n",
       "      <td>achreturns1years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>archive_attr</th>\n",
       "      <td>archive_attr</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flag_dx_combo</th>\n",
       "      <td>flag_dx_combo</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flag_train</th>\n",
       "      <td>flag_train</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PERF_ALL_IND_P12M_Bad_Flag</th>\n",
       "      <td>PERF_ALL_IND_P12M_Bad_Flag</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dx_consumerid</th>\n",
       "      <td>dx_consumerid</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dx_TotalTradelines</th>\n",
       "      <td>dx_TotalTradelines</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dx_ApplicationInquiries7Years</th>\n",
       "      <td>dx_ApplicationInquiries7Years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vendorinquiries1years</th>\n",
       "      <td>vendorinquiries1years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uniquememberinquiries2years</th>\n",
       "      <td>uniquememberinquiries2years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maximumtradelineprincipalpaidoff</th>\n",
       "      <td>maximumtradelineprincipalpaidoff</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>applicationinquiries3years</th>\n",
       "      <td>applicationinquiries3years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vendorinquiries180days</th>\n",
       "      <td>vendorinquiries180days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dailyinquiries120days</th>\n",
       "      <td>dailyinquiries120days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uniquememberinquiries7years</th>\n",
       "      <td>uniquememberinquiries7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lastpaymentdisposition_COMPLETE</th>\n",
       "      <td>lastpaymentdisposition_COMPLETE</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentscompleted7years</th>\n",
       "      <td>paymentscompleted7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weights_model_dx</th>\n",
       "      <td>weights_model_dx</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                 column_name  \\\n",
       "dayssincelastreturn                                      dayssincelastreturn   \n",
       "dayssincelastach                                            dayssincelastach   \n",
       "dayssincelasttradeline                                dayssincelasttradeline   \n",
       "dayssincelastinquiry                                    dayssincelastinquiry   \n",
       "unique_key                                                        unique_key   \n",
       "paymentsreturned3years                                paymentsreturned3years   \n",
       "nsfreturns5years                                            nsfreturns5years   \n",
       "achreturns3years                                            achreturns3years   \n",
       "thirdlastpaymentdisposition_COMPLETE    thirdlastpaymentdisposition_COMPLETE   \n",
       "lastpaymentdisposition_RETURNED              lastpaymentdisposition_RETURNED   \n",
       "secondlastpaymentdisposition_COMPLETE  secondlastpaymentdisposition_COMPLETE   \n",
       "nsfreturns120days                                          nsfreturns120days   \n",
       "paymentsreturned1years                                paymentsreturned1years   \n",
       "maximumtotalprincipal                                  maximumtotalprincipal   \n",
       "applicationinquiries60days                        applicationinquiries60days   \n",
       "chargeoffs7years                                            chargeoffs7years   \n",
       "totalpaidoffs                                                  totalpaidoffs   \n",
       "firstpaymentreturns7years                          firstpaymentreturns7years   \n",
       "currenttradelines                                          currenttradelines   \n",
       "secondlastpaymentdisposition_RETURNED  secondlastpaymentdisposition_RETURNED   \n",
       "paymentsreturned7years                                paymentsreturned7years   \n",
       "maximumtradelineprincipal                          maximumtradelineprincipal   \n",
       "achreturns1years                                            achreturns1years   \n",
       "archive_attr                                                    archive_attr   \n",
       "flag_dx_combo                                                  flag_dx_combo   \n",
       "flag_train                                                        flag_train   \n",
       "PERF_ALL_IND_P12M_Bad_Flag                        PERF_ALL_IND_P12M_Bad_Flag   \n",
       "dx_consumerid                                                  dx_consumerid   \n",
       "dx_TotalTradelines                                        dx_TotalTradelines   \n",
       "dx_ApplicationInquiries7Years                  dx_ApplicationInquiries7Years   \n",
       "vendorinquiries1years                                  vendorinquiries1years   \n",
       "uniquememberinquiries2years                      uniquememberinquiries2years   \n",
       "maximumtradelineprincipalpaidoff            maximumtradelineprincipalpaidoff   \n",
       "applicationinquiries3years                        applicationinquiries3years   \n",
       "vendorinquiries180days                                vendorinquiries180days   \n",
       "dailyinquiries120days                                  dailyinquiries120days   \n",
       "uniquememberinquiries7years                      uniquememberinquiries7years   \n",
       "lastpaymentdisposition_COMPLETE              lastpaymentdisposition_COMPLETE   \n",
       "paymentscompleted7years                              paymentscompleted7years   \n",
       "weights_model_dx                                            weights_model_dx   \n",
       "\n",
       "                                           percent_missing  \n",
       "dayssincelastreturn                                73.2809  \n",
       "dayssincelastach                                   56.8316  \n",
       "dayssincelasttradeline                             48.3565  \n",
       "dayssincelastinquiry                               12.3989  \n",
       "unique_key                                          0.0000  \n",
       "paymentsreturned3years                              0.0000  \n",
       "nsfreturns5years                                    0.0000  \n",
       "achreturns3years                                    0.0000  \n",
       "thirdlastpaymentdisposition_COMPLETE                0.0000  \n",
       "lastpaymentdisposition_RETURNED                     0.0000  \n",
       "secondlastpaymentdisposition_COMPLETE               0.0000  \n",
       "nsfreturns120days                                   0.0000  \n",
       "paymentsreturned1years                              0.0000  \n",
       "maximumtotalprincipal                               0.0000  \n",
       "applicationinquiries60days                          0.0000  \n",
       "chargeoffs7years                                    0.0000  \n",
       "totalpaidoffs                                       0.0000  \n",
       "firstpaymentreturns7years                           0.0000  \n",
       "currenttradelines                                   0.0000  \n",
       "secondlastpaymentdisposition_RETURNED               0.0000  \n",
       "paymentsreturned7years                              0.0000  \n",
       "maximumtradelineprincipal                           0.0000  \n",
       "achreturns1years                                    0.0000  \n",
       "archive_attr                                        0.0000  \n",
       "flag_dx_combo                                       0.0000  \n",
       "flag_train                                          0.0000  \n",
       "PERF_ALL_IND_P12M_Bad_Flag                          0.0000  \n",
       "dx_consumerid                                       0.0000  \n",
       "dx_TotalTradelines                                  0.0000  \n",
       "dx_ApplicationInquiries7Years                       0.0000  \n",
       "vendorinquiries1years                               0.0000  \n",
       "uniquememberinquiries2years                         0.0000  \n",
       "maximumtradelineprincipalpaidoff                    0.0000  \n",
       "applicationinquiries3years                          0.0000  \n",
       "vendorinquiries180days                              0.0000  \n",
       "dailyinquiries120days                               0.0000  \n",
       "uniquememberinquiries7years                         0.0000  \n",
       "lastpaymentdisposition_COMPLETE                     0.0000  \n",
       "paymentscompleted7years                             0.0000  \n",
       "weights_model_dx                                    0.0000  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "percent_missing = ads_seg6_test_wo_transf.isnull().sum() * 100 / len(ads_seg6_test_wo_transf)\n",
    "missing_value_df = pd.DataFrame({'column_name': ads_seg6_train_wo_transf.columns,\n",
    "                                 'percent_missing': percent_missing})\n",
    "missing_value_df.sort_values('percent_missing', inplace=True,ascending=False)\n",
    "missing_value_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "earlier-second",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.ads_seg6_oot_wo_transf;\n"
     ]
    }
   ],
   "source": [
    "ads_seg6_oot_wo_transf=convertToDF('ads_seg6_oot_wo_transf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "negative-rings",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_name</th>\n",
       "      <th>percent_missing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>dayssincelastreturn</th>\n",
       "      <td>dayssincelastreturn</td>\n",
       "      <td>73.3416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelastach</th>\n",
       "      <td>dayssincelastach</td>\n",
       "      <td>56.8577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelasttradeline</th>\n",
       "      <td>dayssincelasttradeline</td>\n",
       "      <td>48.3531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelastinquiry</th>\n",
       "      <td>dayssincelastinquiry</td>\n",
       "      <td>12.4101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique_key</th>\n",
       "      <td>unique_key</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentsreturned3years</th>\n",
       "      <td>paymentsreturned3years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nsfreturns5years</th>\n",
       "      <td>nsfreturns5years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>achreturns3years</th>\n",
       "      <td>achreturns3years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thirdlastpaymentdisposition_COMPLETE</th>\n",
       "      <td>thirdlastpaymentdisposition_COMPLETE</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lastpaymentdisposition_RETURNED</th>\n",
       "      <td>lastpaymentdisposition_RETURNED</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>secondlastpaymentdisposition_COMPLETE</th>\n",
       "      <td>secondlastpaymentdisposition_COMPLETE</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nsfreturns120days</th>\n",
       "      <td>nsfreturns120days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentsreturned1years</th>\n",
       "      <td>paymentsreturned1years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maximumtotalprincipal</th>\n",
       "      <td>maximumtotalprincipal</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>applicationinquiries60days</th>\n",
       "      <td>applicationinquiries60days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chargeoffs7years</th>\n",
       "      <td>chargeoffs7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>totalpaidoffs</th>\n",
       "      <td>totalpaidoffs</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>firstpaymentreturns7years</th>\n",
       "      <td>firstpaymentreturns7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>currenttradelines</th>\n",
       "      <td>currenttradelines</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>secondlastpaymentdisposition_RETURNED</th>\n",
       "      <td>secondlastpaymentdisposition_RETURNED</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentsreturned7years</th>\n",
       "      <td>paymentsreturned7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maximumtradelineprincipal</th>\n",
       "      <td>maximumtradelineprincipal</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>achreturns1years</th>\n",
       "      <td>achreturns1years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>archive_attr</th>\n",
       "      <td>archive_attr</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flag_dx_combo</th>\n",
       "      <td>flag_dx_combo</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>flag_train</th>\n",
       "      <td>flag_train</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PERF_ALL_IND_P12M_Bad_Flag</th>\n",
       "      <td>PERF_ALL_IND_P12M_Bad_Flag</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dx_consumerid</th>\n",
       "      <td>dx_consumerid</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dx_TotalTradelines</th>\n",
       "      <td>dx_TotalTradelines</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dx_ApplicationInquiries7Years</th>\n",
       "      <td>dx_ApplicationInquiries7Years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vendorinquiries1years</th>\n",
       "      <td>vendorinquiries1years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uniquememberinquiries2years</th>\n",
       "      <td>uniquememberinquiries2years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maximumtradelineprincipalpaidoff</th>\n",
       "      <td>maximumtradelineprincipalpaidoff</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>applicationinquiries3years</th>\n",
       "      <td>applicationinquiries3years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vendorinquiries180days</th>\n",
       "      <td>vendorinquiries180days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dailyinquiries120days</th>\n",
       "      <td>dailyinquiries120days</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uniquememberinquiries7years</th>\n",
       "      <td>uniquememberinquiries7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lastpaymentdisposition_COMPLETE</th>\n",
       "      <td>lastpaymentdisposition_COMPLETE</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>paymentscompleted7years</th>\n",
       "      <td>paymentscompleted7years</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weights_model_dx</th>\n",
       "      <td>weights_model_dx</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                 column_name  \\\n",
       "dayssincelastreturn                                      dayssincelastreturn   \n",
       "dayssincelastach                                            dayssincelastach   \n",
       "dayssincelasttradeline                                dayssincelasttradeline   \n",
       "dayssincelastinquiry                                    dayssincelastinquiry   \n",
       "unique_key                                                        unique_key   \n",
       "paymentsreturned3years                                paymentsreturned3years   \n",
       "nsfreturns5years                                            nsfreturns5years   \n",
       "achreturns3years                                            achreturns3years   \n",
       "thirdlastpaymentdisposition_COMPLETE    thirdlastpaymentdisposition_COMPLETE   \n",
       "lastpaymentdisposition_RETURNED              lastpaymentdisposition_RETURNED   \n",
       "secondlastpaymentdisposition_COMPLETE  secondlastpaymentdisposition_COMPLETE   \n",
       "nsfreturns120days                                          nsfreturns120days   \n",
       "paymentsreturned1years                                paymentsreturned1years   \n",
       "maximumtotalprincipal                                  maximumtotalprincipal   \n",
       "applicationinquiries60days                        applicationinquiries60days   \n",
       "chargeoffs7years                                            chargeoffs7years   \n",
       "totalpaidoffs                                                  totalpaidoffs   \n",
       "firstpaymentreturns7years                          firstpaymentreturns7years   \n",
       "currenttradelines                                          currenttradelines   \n",
       "secondlastpaymentdisposition_RETURNED  secondlastpaymentdisposition_RETURNED   \n",
       "paymentsreturned7years                                paymentsreturned7years   \n",
       "maximumtradelineprincipal                          maximumtradelineprincipal   \n",
       "achreturns1years                                            achreturns1years   \n",
       "archive_attr                                                    archive_attr   \n",
       "flag_dx_combo                                                  flag_dx_combo   \n",
       "flag_train                                                        flag_train   \n",
       "PERF_ALL_IND_P12M_Bad_Flag                        PERF_ALL_IND_P12M_Bad_Flag   \n",
       "dx_consumerid                                                  dx_consumerid   \n",
       "dx_TotalTradelines                                        dx_TotalTradelines   \n",
       "dx_ApplicationInquiries7Years                  dx_ApplicationInquiries7Years   \n",
       "vendorinquiries1years                                  vendorinquiries1years   \n",
       "uniquememberinquiries2years                      uniquememberinquiries2years   \n",
       "maximumtradelineprincipalpaidoff            maximumtradelineprincipalpaidoff   \n",
       "applicationinquiries3years                        applicationinquiries3years   \n",
       "vendorinquiries180days                                vendorinquiries180days   \n",
       "dailyinquiries120days                                  dailyinquiries120days   \n",
       "uniquememberinquiries7years                      uniquememberinquiries7years   \n",
       "lastpaymentdisposition_COMPLETE              lastpaymentdisposition_COMPLETE   \n",
       "paymentscompleted7years                              paymentscompleted7years   \n",
       "weights_model_dx                                            weights_model_dx   \n",
       "\n",
       "                                           percent_missing  \n",
       "dayssincelastreturn                                73.3416  \n",
       "dayssincelastach                                   56.8577  \n",
       "dayssincelasttradeline                             48.3531  \n",
       "dayssincelastinquiry                               12.4101  \n",
       "unique_key                                          0.0000  \n",
       "paymentsreturned3years                              0.0000  \n",
       "nsfreturns5years                                    0.0000  \n",
       "achreturns3years                                    0.0000  \n",
       "thirdlastpaymentdisposition_COMPLETE                0.0000  \n",
       "lastpaymentdisposition_RETURNED                     0.0000  \n",
       "secondlastpaymentdisposition_COMPLETE               0.0000  \n",
       "nsfreturns120days                                   0.0000  \n",
       "paymentsreturned1years                              0.0000  \n",
       "maximumtotalprincipal                               0.0000  \n",
       "applicationinquiries60days                          0.0000  \n",
       "chargeoffs7years                                    0.0000  \n",
       "totalpaidoffs                                       0.0000  \n",
       "firstpaymentreturns7years                           0.0000  \n",
       "currenttradelines                                   0.0000  \n",
       "secondlastpaymentdisposition_RETURNED               0.0000  \n",
       "paymentsreturned7years                              0.0000  \n",
       "maximumtradelineprincipal                           0.0000  \n",
       "achreturns1years                                    0.0000  \n",
       "archive_attr                                        0.0000  \n",
       "flag_dx_combo                                       0.0000  \n",
       "flag_train                                          0.0000  \n",
       "PERF_ALL_IND_P12M_Bad_Flag                          0.0000  \n",
       "dx_consumerid                                       0.0000  \n",
       "dx_TotalTradelines                                  0.0000  \n",
       "dx_ApplicationInquiries7Years                       0.0000  \n",
       "vendorinquiries1years                               0.0000  \n",
       "uniquememberinquiries2years                         0.0000  \n",
       "maximumtradelineprincipalpaidoff                    0.0000  \n",
       "applicationinquiries3years                          0.0000  \n",
       "vendorinquiries180days                              0.0000  \n",
       "dailyinquiries120days                               0.0000  \n",
       "uniquememberinquiries7years                         0.0000  \n",
       "lastpaymentdisposition_COMPLETE                     0.0000  \n",
       "paymentscompleted7years                             0.0000  \n",
       "weights_model_dx                                    0.0000  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "percent_missing = ads_seg6_oot_wo_transf.isnull().sum() * 100 / len(ads_seg6_oot_wo_transf)\n",
    "missing_value_df = pd.DataFrame({'column_name': ads_seg6_train_wo_transf.columns,\n",
    "                                 'percent_missing': percent_missing})\n",
    "missing_value_df.sort_values('percent_missing', inplace=True,ascending=False)\n",
    "missing_value_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "approved-governor",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.ads_dx_raw_all_02_2017;\n"
     ]
    }
   ],
   "source": [
    "## Doing it on the full data set of raw values of DX segment only for 2017-01 Arcihve:\n",
    "\n",
    "ads_dx_raw_all_02_2017=convertToDF('ads_dx_raw_all_02_2017')\n",
    "\n",
    "percent_missing = ads_dx_raw_all_02_2017.isnull().sum() * 100 / len(ads_dx_raw_all_02_2017)\n",
    "missing_value_df = pd.DataFrame({'column_name': ads_dx_raw_all_02_2017.columns,\n",
    "                                 'percent_missing': percent_missing})\n",
    "missing_value_df.sort_values('percent_missing', inplace=True,ascending=False)\n",
    "missing_value_df.head()\n",
    "\n",
    "missing_value_df.to_csv('ads_dx_raw_all_02_2017_missing_value.csv')  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "analyzed-evanescence",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_name</th>\n",
       "      <th>percent_missing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>dayssincelastfatalreturn</th>\n",
       "      <td>dayssincelastfatalreturn</td>\n",
       "      <td>88.9928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>totalcurrentprincipal</th>\n",
       "      <td>totalcurrentprincipal</td>\n",
       "      <td>76.1380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelastreturn</th>\n",
       "      <td>dayssincelastreturn</td>\n",
       "      <td>71.4340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thirdlastpaymenamount</th>\n",
       "      <td>thirdlastpaymenamount</td>\n",
       "      <td>53.2148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dayssincelastach</th>\n",
       "      <td>dayssincelastach</td>\n",
       "      <td>49.9298</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       column_name      percent_missing\n",
       "dayssincelastfatalreturn  dayssincelastfatalreturn              88.9928\n",
       "totalcurrentprincipal        totalcurrentprincipal              76.1380\n",
       "dayssincelastreturn            dayssincelastreturn              71.4340\n",
       "thirdlastpaymenamount        thirdlastpaymenamount              53.2148\n",
       "dayssincelastach                  dayssincelastach              49.9298"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "twelve-harrison",
   "metadata": {},
   "source": [
    "## Section 13  Split OOT period into different parts and score the model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "continued-atlantic",
   "metadata": {},
   "source": [
    "- First run these queries to save the required split OOT datasets in GCP :\n",
    "- create table dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_final_data_withdate \n",
    "as select a.*,b.archive_attr from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.oot_data_seg6_dx a left join \n",
    "dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_oot b\n",
    "on a.unique_key =b.unique_key;\n",
    "\n",
    "- create table dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_2016\n",
    "as select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_final_data_withdate where archive_attr in ('2016-01-01','2016-02-01','2016-06-01','2016-07-01','2016-08-01');\n",
    "\n",
    "- create table dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_2019\n",
    "as select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_final_data_withdate where archive_attr in ('2019-03-01','2019-04-01','2019-05-01','2019-06-01','2019-09-01','2019-10-01','2019-11-01');\n",
    "\n",
    "- create table dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_2019_MA\n",
    "as select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_final_data_withdate where archive_attr in ('2019-03-01','2019-04-01');\n",
    "\n",
    "\n",
    "\n",
    "- create table dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_2019_MJ\n",
    "as select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_final_data_withdate where archive_attr in ('2019-05-01','2019-06-01');\n",
    "\n",
    "- create table dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_2019_SON\n",
    "as select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_final_data_withdate where archive_attr in ('2019-09-01','2019-10-01','2019-11-01');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "immune-commission",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "select unique_key,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,good,bad from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_2016;\n",
      "select unique_key,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,good,bad from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_2019;\n",
      "select unique_key,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,good,bad from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_2019_MA;\n",
      "select unique_key,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,good,bad from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_2019_MJ;\n",
      "select unique_key,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,good,bad from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.DX_oot_2019_SON;\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from google.cloud import bigquery as bq\n",
    "\n",
    "def convertToDF(tableName,project_name = 'dfa-dna-ws5155-us-prd-d151',database_name = 'dfa_dna_ws5155_us_prd_sandbox'):\n",
    "    bqTbl = bq.TableReference.from_string(f\"{project_name}.{database_name}.{tableName}\")\n",
    "\n",
    "\n",
    "    query_string=\"select unique_key,dayssincelastinquiry,vendorinquiries1years,uniquememberinquiries2years,maximumtradelineprincipalpaidoff,applicationinquiries3years,dayssincelastreturn,dayssincelasttradeline,vendorinquiries180days,dailyinquiries120days,uniquememberinquiries7years,lastpaymentdisposition_COMPLETE,paymentscompleted7years,maximumtradelineprincipal,achreturns1years,maximumtotalprincipal,paymentsreturned7years,nsfreturns5years,achreturns3years,thirdlastpaymentdisposition_COMPLETE,lastpaymentdisposition_RETURNED,secondlastpaymentdisposition_COMPLETE,paymentsreturned3years,paymentsreturned1years,nsfreturns120days,applicationinquiries60days,chargeoffs7years,totalpaidoffs,firstpaymentreturns7years,dayssincelastach,currenttradelines,secondlastpaymentdisposition_RETURNED,good,bad from \"+\"\"f\"{project_name}.{database_name}.{tableName}\"+\";\"\n",
    "\n",
    "    print(query_string)\n",
    "    client=bq.Client()\n",
    "    data=client.query(query_string)\n",
    "    data=data.result().to_dataframe()\n",
    "    return data\n",
    "\n",
    "\n",
    "DX_oot_2016=convertToDF('DX_oot_2016')\n",
    "DX_oot_2019=convertToDF('DX_oot_2019')\n",
    "DX_oot_2019_MA=convertToDF('DX_oot_2019_MA')\n",
    "DX_oot_2019_MJ=convertToDF('DX_oot_2019_MJ')\n",
    "DX_oot_2019_SON=convertToDF('DX_oot_2019_SON')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "novel-shower",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "unique_key           object\n",
      "weights_model_dx    float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(oot_dx_weights.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "encouraging-newport",
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert all columns of DataFrame to numeric forms for model development: \n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "DX_oot_2016.iloc[:, 1:]=DX_oot_2016.iloc[:, 1:].apply(pd.to_numeric)\n",
    "\n",
    "DX_oot_2019.iloc[:, 1:]=DX_oot_2019.iloc[:, 1:].apply(pd.to_numeric)\n",
    "\n",
    "DX_oot_2019_MA.iloc[:, 1:]=DX_oot_2019_MA.iloc[:, 1:].apply(pd.to_numeric)\n",
    "\n",
    "DX_oot_2019_MJ.iloc[:, 1:]=DX_oot_2019_MJ.iloc[:, 1:].apply(pd.to_numeric)\n",
    "DX_oot_2019_SON.iloc[:, 1:]=DX_oot_2019_SON.iloc[:, 1:].apply(pd.to_numeric)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "modern-chicken",
   "metadata": {},
   "outputs": [],
   "source": [
    "DX_oot_2016=DX_oot_2016.merge(oot_dx_weights,on='unique_key',how='left')\n",
    "DX_oot_2019=DX_oot_2019.merge(oot_dx_weights,on='unique_key',how='left')\n",
    "DX_oot_2019_MA=DX_oot_2019_MA.merge(oot_dx_weights,on='unique_key',how='left')\n",
    "DX_oot_2019_MJ=DX_oot_2019_MJ.merge(oot_dx_weights,on='unique_key',how='left')\n",
    "DX_oot_2019_SON=DX_oot_2019_SON.merge(oot_dx_weights,on='unique_key',how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "related-amplifier",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_key</th>\n",
       "      <th>dayssincelastinquiry</th>\n",
       "      <th>vendorinquiries1years</th>\n",
       "      <th>uniquememberinquiries2years</th>\n",
       "      <th>maximumtradelineprincipalpaidoff</th>\n",
       "      <th>applicationinquiries3years</th>\n",
       "      <th>dayssincelastreturn</th>\n",
       "      <th>dayssincelasttradeline</th>\n",
       "      <th>vendorinquiries180days</th>\n",
       "      <th>dailyinquiries120days</th>\n",
       "      <th>...</th>\n",
       "      <th>applicationinquiries60days</th>\n",
       "      <th>chargeoffs7years</th>\n",
       "      <th>totalpaidoffs</th>\n",
       "      <th>firstpaymentreturns7years</th>\n",
       "      <th>dayssincelastach</th>\n",
       "      <th>currenttradelines</th>\n",
       "      <th>secondlastpaymentdisposition_RETURNED</th>\n",
       "      <th>good</th>\n",
       "      <th>bad</th>\n",
       "      <th>weights_model_dx</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-03-01-415216375-02AA4BA90A36FC0901-1C70CE...</td>\n",
       "      <td>206.0000</td>\n",
       "      <td>-1.0000</td>\n",
       "      <td>-1.0000</td>\n",
       "      <td>208.0000</td>\n",
       "      <td>-1.0000</td>\n",
       "      <td>3,627.0000</td>\n",
       "      <td>3.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>10.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-09-01-411510368-01A966F0A13929D903-2F7066...</td>\n",
       "      <td>1,733.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>3,627.0000</td>\n",
       "      <td>3.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>2,163.0000</td>\n",
       "      <td>-1.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.8902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-08-01-620763022-01AE5BA89E8DC7A405-0CB167...</td>\n",
       "      <td>1,733.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>255.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>3,627.0000</td>\n",
       "      <td>3.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>2,163.0000</td>\n",
       "      <td>-1.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.4115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016-03-01-561597185-01AE82B86D3592CB80-063C0D...</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>-2.0000</td>\n",
       "      <td>-2.0000</td>\n",
       "      <td>250.0000</td>\n",
       "      <td>-2.0000</td>\n",
       "      <td>3,627.0000</td>\n",
       "      <td>3.0000</td>\n",
       "      <td>-1.0000</td>\n",
       "      <td>-1.0000</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>12.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>11.0000</td>\n",
       "      <td>-2.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.3515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016-07-01-438270820-01AAA6D25D7958F204-16795B...</td>\n",
       "      <td>10.0000</td>\n",
       "      <td>-3.0000</td>\n",
       "      <td>-3.0000</td>\n",
       "      <td>350.0000</td>\n",
       "      <td>-2.0000</td>\n",
       "      <td>3,627.0000</td>\n",
       "      <td>3.0000</td>\n",
       "      <td>-3.0000</td>\n",
       "      <td>-3.0000</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>28.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>-0.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.3230</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          unique_key  dayssincelastinquiry  \\\n",
       "0  2016-03-01-415216375-02AA4BA90A36FC0901-1C70CE...              206.0000   \n",
       "1  2016-09-01-411510368-01A966F0A13929D903-2F7066...            1,733.0000   \n",
       "2  2016-08-01-620763022-01AE5BA89E8DC7A405-0CB167...            1,733.0000   \n",
       "3  2016-03-01-561597185-01AE82B86D3592CB80-063C0D...               18.0000   \n",
       "4  2016-07-01-438270820-01AAA6D25D7958F204-16795B...               10.0000   \n",
       "\n",
       "   vendorinquiries1years  uniquememberinquiries2years  \\\n",
       "0                -1.0000                      -1.0000   \n",
       "1                -0.0000                      -0.0000   \n",
       "2                -0.0000                      -0.0000   \n",
       "3                -2.0000                      -2.0000   \n",
       "4                -3.0000                      -3.0000   \n",
       "\n",
       "   maximumtradelineprincipalpaidoff  applicationinquiries3years  \\\n",
       "0                          208.0000                     -1.0000   \n",
       "1                            0.0000                     -0.0000   \n",
       "2                          255.0000                     -0.0000   \n",
       "3                          250.0000                     -2.0000   \n",
       "4                          350.0000                     -2.0000   \n",
       "\n",
       "   dayssincelastreturn  dayssincelasttradeline  vendorinquiries180days  \\\n",
       "0           3,627.0000                  3.0000                 -0.0000   \n",
       "1           3,627.0000                  3.0000                 -0.0000   \n",
       "2           3,627.0000                  3.0000                 -0.0000   \n",
       "3           3,627.0000                  3.0000                 -1.0000   \n",
       "4           3,627.0000                  3.0000                 -3.0000   \n",
       "\n",
       "   dailyinquiries120days  ...  applicationinquiries60days  \\\n",
       "0                -0.0000  ...                     -0.0000   \n",
       "1                -0.0000  ...                     -0.0000   \n",
       "2                -0.0000  ...                     -0.0000   \n",
       "3                -1.0000  ...                     -1.0000   \n",
       "4                -3.0000  ...                     -2.0000   \n",
       "\n",
       "      chargeoffs7years        totalpaidoffs  firstpaymentreturns7years  \\\n",
       "0              -0.0000               5.0000                    -0.0000   \n",
       "1              -0.0000               0.0000                    -0.0000   \n",
       "2              -0.0000               1.0000                    -0.0000   \n",
       "3              -0.0000              12.0000                    -0.0000   \n",
       "4              -0.0000               2.0000                    -0.0000   \n",
       "\n",
       "      dayssincelastach    currenttradelines  \\\n",
       "0              10.0000              -0.0000   \n",
       "1           2,163.0000              -1.0000   \n",
       "2           2,163.0000              -1.0000   \n",
       "3              11.0000              -2.0000   \n",
       "4              28.0000              -0.0000   \n",
       "\n",
       "   secondlastpaymentdisposition_RETURNED  good  bad     weights_model_dx  \n",
       "0                                -0.0000     1    0               0.8297  \n",
       "1                                -0.0000     0    1               0.8902  \n",
       "2                                -0.0000     1    0               1.4115  \n",
       "3                                -0.0000     1    0               1.3515  \n",
       "4                                -0.0000     0    1               1.3230  \n",
       "\n",
       "[5 rows x 35 columns]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DX_oot_2016.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "imperial-triangle",
   "metadata": {},
   "outputs": [],
   "source": [
    "oot16_weights=DX_oot_2016.iloc[:,34]\n",
    "oot19_weights=DX_oot_2019.iloc[:,34]\n",
    "oot19_MA_weights=DX_oot_2019_MA.iloc[:,34]\n",
    "oot19_MJ_weights=DX_oot_2019_MJ.iloc[:,34]\n",
    "oot19_SON_weights=DX_oot_2019_SON.iloc[:,34]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "potential-darkness",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                 0.8297\n",
       "1                 0.8902\n",
       "2                 1.4115\n",
       "3                 1.3515\n",
       "4                 1.3230\n",
       "Name: weights_model_dx, dtype: float64"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oot16_weights.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "increasing-position",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_oot16 = DX_oot_2016.drop(['unique_key','good','bad','weights_model_dx'], axis=1)\n",
    "X_oot19 = DX_oot_2019.drop(['unique_key','good','bad','weights_model_dx'], axis=1)\n",
    "X_oot19_MA = DX_oot_2019_MA.drop(['unique_key','good','bad','weights_model_dx'], axis=1)\n",
    "X_oot19_MJ = DX_oot_2019_MJ.drop(['unique_key','good','bad','weights_model_dx'], axis=1)\n",
    "X_oot19_SON = DX_oot_2019_SON.drop(['unique_key','good','bad','weights_model_dx'], axis=1)\n",
    "\n",
    "\n",
    "y_oot16 = DX_oot_2016['good']\n",
    "y_oot19 = DX_oot_2019['good']\n",
    "y_oot19_MA = DX_oot_2019_MA['good']\n",
    "y_oot19_MJ = DX_oot_2019_MJ['good']\n",
    "y_oot19_SON = DX_oot_2019_SON['good']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "binary-cisco",
   "metadata": {},
   "outputs": [],
   "source": [
    "# make predictions on train, test and OOT data\n",
    "import xgboost as xgb\n",
    "\n",
    "# Convert dataset to special XGBoost optimised data structure\n",
    "doot16 = xgb.DMatrix(X_oot16, label=y_oot16,weight=oot16_weights.values)\n",
    "doot19 = xgb.DMatrix(X_oot19, label=y_oot19,weight=oot19_weights.values)\n",
    "doot19_MA = xgb.DMatrix(X_oot19_MA, label=y_oot19_MA,weight=oot19_MA_weights.values)\n",
    "doot19_MJ = xgb.DMatrix(X_oot19_MJ, label=y_oot19_MJ,weight=oot19_MJ_weights.values)\n",
    "doot19_SON = xgb.DMatrix(X_oot19_SON, label=y_oot19_SON,weight=oot19_SON_weights.values)\n",
    "\n",
    "\n",
    "y_pred_oot_16_proba = booster_model.predict(doot16)\n",
    "y_pred_oot_19_proba = booster_model.predict(doot19)\n",
    "y_pred_oot_19_MA_proba = booster_model.predict(doot19_MA)\n",
    "y_pred_oot_19_MJ_proba = booster_model.predict(doot19_MJ)\n",
    "y_pred_oot_19_SON_proba = booster_model.predict(doot19_SON)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "graphic-cooper",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          1\n",
       "1          0\n",
       "2          1\n",
       "3          1\n",
       "4          0\n",
       "          ..\n",
       "1133843    1\n",
       "1133844    0\n",
       "1133845    0\n",
       "1133846    0\n",
       "1133847    1\n",
       "Name: good, Length: 1133848, dtype: int64"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_oot16"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "published-stylus",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_oot16=y_oot16.astype(int)\n",
    "y_oot19=y_oot19.astype(int)\n",
    "y_oot19_MA=y_oot19_MA.astype(int)\n",
    "y_oot19_MJ=y_oot19_MJ.astype(int)\n",
    "y_oot19_SON=y_oot19_SON.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "sublime-interim",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.17146969665593376, 0.2382140363602121)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ks_w2(y_oot16,y_pred_oot_16_proba,oot16_weights.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "subtle-elevation",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.19886329053609214, 0.275108297602356)"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ks_w2(y_oot19,y_pred_oot_19_proba,oot19_weights.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "agreed-advancement",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.2001682298845353, 0.27585145752863793)"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ks_w2(y_oot19_MA,y_pred_oot_19_MA_proba,oot19_MA_weights.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "marked-privacy",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.19663259694749707, 0.270037507093039)"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ks_w2(y_oot19_MJ,y_pred_oot_19_MJ_proba,oot19_MJ_weights.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "monthly-reader",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.20516196578632495, 0.2833047474977306)"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ks_w2(y_oot19_SON,y_pred_oot_19_SON_proba,oot19_SON_weights.values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "chronic-campaign",
   "metadata": {},
   "source": [
    " ## OOT split ## Capture rate analysis :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "sized-participant",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_check= [y_oot16,y_oot19,y_oot19_MA,y_oot19_MJ,y_oot19_SON]\n",
    "y_prob_check= [y_pred_oot_16_proba,y_pred_oot_19_proba,y_pred_oot_19_MA_proba,y_pred_oot_19_MJ_proba,y_pred_oot_19_SON_proba]\n",
    "oot_time_period= ['oot_16','oot_19','oot_19_MA','oot_19_MJ','oot_19_SON']\n",
    "\n",
    "df_summ_oot_cap_rate=pd.DataFrame()\n",
    "df_summ_oot_cap_rate_final=pd.DataFrame()\n",
    "\n",
    "for i in range(len(y_check)) :\n",
    "    \n",
    "    y_oot1=y_check[i]\n",
    "    y_pred_oot_1_proba=y_prob_check[i]\n",
    "    oot_time=oot_time_period[i]\n",
    "    \n",
    "    \n",
    "    df_cap_rate=pd.concat([pd.Series(y_oot1.values),pd.Series(y_pred_oot_1_proba)],axis=1)\n",
    "    df_cap_rate.columns=['y_oot','y_pred_oot_proba']\n",
    "    df_cap_rate_sorted=df_cap_rate.sort_values(by='y_pred_oot_proba')\n",
    "\n",
    "    p_10_prob=df_cap_rate_sorted['y_pred_oot_proba'].quantile(0.1) \n",
    "    p_20_prob=df_cap_rate_sorted['y_pred_oot_proba'].quantile(0.2) \n",
    "    p_30_prob=df_cap_rate_sorted['y_pred_oot_proba'].quantile(0.3) \n",
    "\n",
    "    df_cap_rate_p10=df_cap_rate_sorted[df_cap_rate_sorted['y_pred_oot_proba']<p_10_prob]\n",
    "    df_cap_rate_p20=df_cap_rate_sorted[df_cap_rate_sorted['y_pred_oot_proba']<p_20_prob]\n",
    "    df_cap_rate_p30=df_cap_rate_sorted[df_cap_rate_sorted['y_pred_oot_proba']<p_30_prob]\n",
    "\n",
    "    n_count_p10=df_cap_rate_p10['y_oot'].sum()\n",
    "    n_count_p20=df_cap_rate_p20['y_oot'].sum()   \n",
    "    n_count_p30=df_cap_rate_p30['y_oot'].sum()\n",
    "\n",
    "\n",
    "    total_bads=len(df_cap_rate_sorted)-df_cap_rate_sorted['y_oot'].sum()\n",
    "\n",
    "    bads_10p=len(df_cap_rate_p10)-n_count_p10\n",
    "    bads_20p=len(df_cap_rate_p20)-n_count_p20\n",
    "    bads_30p=len(df_cap_rate_p30)-n_count_p30\n",
    "\n",
    "    capture_rate_p10=bads_10p/total_bads\n",
    "    capture_rate_p20=bads_20p/total_bads\n",
    "    capture_rate_p30=bads_30p/total_bads\n",
    "    \n",
    "    ## Finally, the summary table:\n",
    "            \n",
    "    df_summ_oot_cap_rate=pd.DataFrame([[oot_time,capture_rate_p10,capture_rate_p20,capture_rate_p30]],columns=['oot_time','capture_rate_p10','capture_rate_p20','capture_rate_p30'])\n",
    "\n",
    "    df_summ_oot_cap_rate_final=df_summ_oot_cap_rate_final.append(df_summ_oot_cap_rate)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "behavioral-marine",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>oot_time</th>\n",
       "      <th>capture_rate_p10</th>\n",
       "      <th>capture_rate_p20</th>\n",
       "      <th>capture_rate_p30</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>oot_16</td>\n",
       "      <td>0.1548</td>\n",
       "      <td>0.2873</td>\n",
       "      <td>0.4055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>oot_19</td>\n",
       "      <td>0.1772</td>\n",
       "      <td>0.3195</td>\n",
       "      <td>0.4413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>oot_19_MA</td>\n",
       "      <td>0.1725</td>\n",
       "      <td>0.3129</td>\n",
       "      <td>0.4333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>oot_19_MJ</td>\n",
       "      <td>0.1716</td>\n",
       "      <td>0.3125</td>\n",
       "      <td>0.4326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>oot_19_SON</td>\n",
       "      <td>0.1854</td>\n",
       "      <td>0.3311</td>\n",
       "      <td>0.4526</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     oot_time     capture_rate_p10     capture_rate_p20     capture_rate_p30\n",
       "0      oot_16               0.1548               0.2873               0.4055\n",
       "0      oot_19               0.1772               0.3195               0.4413\n",
       "0   oot_19_MA               0.1725               0.3129               0.4333\n",
       "0   oot_19_MJ               0.1716               0.3125               0.4326\n",
       "0  oot_19_SON               0.1854               0.3311               0.4526"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_summ_oot_cap_rate_final"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "verified-overview",
   "metadata": {},
   "source": [
    "## OOT Split analysis: Mapping the archive date to check monthwise Good, Bad, total,\n",
    "Create the below tables in GCP by modifying the where condition and table names as per the segment.\n",
    "\n",
    "create table dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.dev_dx_archivedate as select unique_key,archive_attr from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_2 WHERE flag_dx_tt_combo=1 and flag_train = 1 and PERF_ALL_IND_P12M_Bad_Flag in (0,1) and dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 OR dx_ApplicationInquiries7Years >=1) and tt_consumerid IS NOT NULL AND (TT_LALL000>=1 OR TT_OCALL00>=1 OR TT_INQALL00>=1);\n",
    "\n",
    "create table dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.val_dx_archivedate as select unique_key,archive_attr from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_2 WHERE flag_dx_tt_combo=1 and flag_val = 1 and PERF_ALL_IND_P12M_Bad_Flag in (0,1) and dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 OR dx_ApplicationInquiries7Years >=1) and tt_consumerid IS NOT NULL AND (TT_LALL000>=1 OR TT_OCALL00>=1 OR TT_INQALL00>=1) ;\n",
    "\n",
    "create table dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.test_dx_archivedate as select unique_key,archive_attr from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_2 WHERE flag_dx_tt_combo=1 and flag_test = 1 and PERF_ALL_IND_P12M_Bad_Flag in (0,1) and dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 OR dx_ApplicationInquiries7Years >=1) and tt_consumerid IS NOT NULL AND (TT_LALL000>=1 OR TT_OCALL00>=1 OR TT_INQALL00>=1) ;\n",
    "\n",
    "create table dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.oot_dx_archivedate as select unique_key,archive_attr from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.combine_dev_final_oot WHERE flag_dx_tt_combo=1 and PERF_ALL_IND_P12M_Bad_Flag in (0,1) and dx_consumerid IS NOT NULL AND (dx_TotalTradelines >=1 OR dx_ApplicationInquiries7Years >=1) and tt_consumerid IS NOT NULL AND (TT_LALL000>=1 OR TT_OCALL00>=1 OR TT_INQALL00>=1) ;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "defensive-characterization",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.dev_dx_archivedate;\n",
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.val_dx_archivedate;\n",
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.test_dx_archivedate;\n",
      "select * from dfa-dna-ws5155-us-prd-d151.dfa_dna_ws5155_us_prd_sandbox.oot_dx_archivedate;\n"
     ]
    }
   ],
   "source": [
    "## Let us now read the individual data wise weights : \n",
    "    \n",
    "    \n",
    "from google.cloud import bigquery as bq\n",
    "\n",
    "def convertToDF(tableName,project_name = 'dfa-dna-ws5155-us-prd-d151',database_name = 'dfa_dna_ws5155_us_prd_sandbox'):\n",
    "        bqTbl = bq.TableReference.from_string(f\"{project_name}.{database_name}.{tableName}\")\n",
    "\n",
    "\n",
    "        query_string=\"select * from \"+\"\"f\"{project_name}.{database_name}.{tableName}\"+\";\"\n",
    "\n",
    "        print(query_string)\n",
    "        client=bq.Client()\n",
    "        data=client.query(query_string)\n",
    "        data=data.result().to_dataframe()\n",
    "        return data\n",
    "\n",
    "train_dx_archivedate=convertToDF('dev_dx_archivedate')\n",
    "val_dx_archivedate=convertToDF('val_dx_archivedate')\n",
    "test_dx_archivedate=convertToDF('test_dx_archivedate')\n",
    "oot_dx_archivedate=convertToDF('oot_dx_archivedate')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "silver-audit",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Merge the archive date to the train val test and oot datasets :\n",
    "ads_seg6_dx_dev_adhoc=ads_seg6_dx_dev_data_final.merge(train_dx_archivedate,on='unique_key',how='left')\n",
    "ads_seg6_dx_val_adhoc=ads_seg6_dx_val_data_final.merge(val_dx_archivedate,on='unique_key',how='left')\n",
    "ads_seg6_dx_test_adhoc=ads_seg6_dx_test_data_final.merge(test_dx_archivedate,on='unique_key',how='left')\n",
    "ads_seg6_dx_oot_adhoc=ads_seg6_dx_oot_data_final.merge(oot_dx_archivedate,on='unique_key',how='left')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "filled-mechanism",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-8-326329f194e7>:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  ads_seg6_dx_dev_adhoc.groupby('archive_attr')['good','bad'].agg('sum')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>good</th>\n",
       "      <th>bad</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>archive_attr</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-02-01</th>\n",
       "      <td>107862</td>\n",
       "      <td>55213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-01</th>\n",
       "      <td>86456</td>\n",
       "      <td>42193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-04-01</th>\n",
       "      <td>92614</td>\n",
       "      <td>43886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-05-01</th>\n",
       "      <td>99601</td>\n",
       "      <td>46110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-01</th>\n",
       "      <td>99368</td>\n",
       "      <td>44236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-07-01</th>\n",
       "      <td>109862</td>\n",
       "      <td>44636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-01</th>\n",
       "      <td>105603</td>\n",
       "      <td>40551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-09-01</th>\n",
       "      <td>104751</td>\n",
       "      <td>43456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-10-01</th>\n",
       "      <td>118116</td>\n",
       "      <td>47834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-11-01</th>\n",
       "      <td>126680</td>\n",
       "      <td>55069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-01</th>\n",
       "      <td>115721</td>\n",
       "      <td>49221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01</th>\n",
       "      <td>121548</td>\n",
       "      <td>54101</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                good    bad\n",
       "archive_attr               \n",
       "2017-02-01    107862  55213\n",
       "2017-03-01     86456  42193\n",
       "2017-04-01     92614  43886\n",
       "2017-05-01     99601  46110\n",
       "2017-06-01     99368  44236\n",
       "2017-07-01    109862  44636\n",
       "2017-08-01    105603  40551\n",
       "2017-09-01    104751  43456\n",
       "2017-10-01    118116  47834\n",
       "2017-11-01    126680  55069\n",
       "2017-12-01    115721  49221\n",
       "2018-01-01    121548  54101"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ads_seg6_dx_dev_adhoc.groupby('archive_attr')['good','bad'].agg('sum')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "personalized-enzyme",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-9-f88fe9572b2c>:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  ads_seg6_dx_val_adhoc.groupby('archive_attr')['good','bad'].agg('sum')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>good</th>\n",
       "      <th>bad</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>archive_attr</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-02-01</th>\n",
       "      <td>64991</td>\n",
       "      <td>33131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-01</th>\n",
       "      <td>51722</td>\n",
       "      <td>25359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-04-01</th>\n",
       "      <td>55738</td>\n",
       "      <td>26308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-05-01</th>\n",
       "      <td>59267</td>\n",
       "      <td>27851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-01</th>\n",
       "      <td>60025</td>\n",
       "      <td>26381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-07-01</th>\n",
       "      <td>66041</td>\n",
       "      <td>26759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-01</th>\n",
       "      <td>63537</td>\n",
       "      <td>23842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-09-01</th>\n",
       "      <td>62810</td>\n",
       "      <td>26245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-10-01</th>\n",
       "      <td>71156</td>\n",
       "      <td>28958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-11-01</th>\n",
       "      <td>75986</td>\n",
       "      <td>33112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-01</th>\n",
       "      <td>69170</td>\n",
       "      <td>29449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01</th>\n",
       "      <td>72582</td>\n",
       "      <td>32519</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               good    bad\n",
       "archive_attr              \n",
       "2017-02-01    64991  33131\n",
       "2017-03-01    51722  25359\n",
       "2017-04-01    55738  26308\n",
       "2017-05-01    59267  27851\n",
       "2017-06-01    60025  26381\n",
       "2017-07-01    66041  26759\n",
       "2017-08-01    63537  23842\n",
       "2017-09-01    62810  26245\n",
       "2017-10-01    71156  28958\n",
       "2017-11-01    75986  33112\n",
       "2017-12-01    69170  29449\n",
       "2018-01-01    72582  32519"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ads_seg6_dx_val_adhoc.groupby('archive_attr')['good','bad'].agg('sum')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "junior-version",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-10-06e39e013899>:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  ads_seg6_dx_test_adhoc.groupby('archive_attr')['good','bad'].agg('sum')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>good</th>\n",
       "      <th>bad</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>archive_attr</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-02-01</th>\n",
       "      <td>43503</td>\n",
       "      <td>22379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-01</th>\n",
       "      <td>34695</td>\n",
       "      <td>16752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-04-01</th>\n",
       "      <td>36766</td>\n",
       "      <td>17632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-05-01</th>\n",
       "      <td>39585</td>\n",
       "      <td>18294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-01</th>\n",
       "      <td>39574</td>\n",
       "      <td>17711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-07-01</th>\n",
       "      <td>43768</td>\n",
       "      <td>17711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-01</th>\n",
       "      <td>42143</td>\n",
       "      <td>16204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-09-01</th>\n",
       "      <td>41621</td>\n",
       "      <td>17324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-10-01</th>\n",
       "      <td>47513</td>\n",
       "      <td>19202</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-11-01</th>\n",
       "      <td>50500</td>\n",
       "      <td>22119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-01</th>\n",
       "      <td>46417</td>\n",
       "      <td>19697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01</th>\n",
       "      <td>48562</td>\n",
       "      <td>21593</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               good    bad\n",
       "archive_attr              \n",
       "2017-02-01    43503  22379\n",
       "2017-03-01    34695  16752\n",
       "2017-04-01    36766  17632\n",
       "2017-05-01    39585  18294\n",
       "2017-06-01    39574  17711\n",
       "2017-07-01    43768  17711\n",
       "2017-08-01    42143  16204\n",
       "2017-09-01    41621  17324\n",
       "2017-10-01    47513  19202\n",
       "2017-11-01    50500  22119\n",
       "2017-12-01    46417  19697\n",
       "2018-01-01    48562  21593"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ads_seg6_dx_test_adhoc.groupby('archive_attr')['good','bad'].agg('sum')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "elementary-housing",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-11-2dc42c9d7ae1>:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  ads_seg6_dx_oot_adhoc.groupby('archive_attr')['good','bad'].agg('sum')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>good</th>\n",
       "      <th>bad</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>archive_attr</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-01</th>\n",
       "      <td>136604</td>\n",
       "      <td>68785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-02-01</th>\n",
       "      <td>137140</td>\n",
       "      <td>66206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-06-01</th>\n",
       "      <td>155088</td>\n",
       "      <td>74120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-01</th>\n",
       "      <td>173275</td>\n",
       "      <td>80493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-01</th>\n",
       "      <td>167035</td>\n",
       "      <td>75102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-01</th>\n",
       "      <td>294997</td>\n",
       "      <td>123314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-01</th>\n",
       "      <td>301055</td>\n",
       "      <td>116947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-05-01</th>\n",
       "      <td>300936</td>\n",
       "      <td>115598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-01</th>\n",
       "      <td>335500</td>\n",
       "      <td>121178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-09-01</th>\n",
       "      <td>378598</td>\n",
       "      <td>109031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-01</th>\n",
       "      <td>410690</td>\n",
       "      <td>109981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-01</th>\n",
       "      <td>456765</td>\n",
       "      <td>121427</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                good     bad\n",
       "archive_attr                \n",
       "2016-01-01    136604   68785\n",
       "2016-02-01    137140   66206\n",
       "2016-06-01    155088   74120\n",
       "2016-07-01    173275   80493\n",
       "2016-08-01    167035   75102\n",
       "2019-03-01    294997  123314\n",
       "2019-04-01    301055  116947\n",
       "2019-05-01    300936  115598\n",
       "2019-06-01    335500  121178\n",
       "2019-09-01    378598  109031\n",
       "2019-10-01    410690  109981\n",
       "2019-11-01    456765  121427"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ads_seg6_dx_oot_adhoc.groupby('archive_attr')['good','bad'].agg('sum')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cardiac-culture",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
